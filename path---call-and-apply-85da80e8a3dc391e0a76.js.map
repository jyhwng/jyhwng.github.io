{"version":3,"sources":["webpack:///path---call-and-apply-85da80e8a3dc391e0a76.js","webpack:///./.cache/json/call-and-apply.json"],"names":["webpackJsonp","370","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,i4PAAknQC,aAAiFC,MAAA,uBAAAC,KAAA,aAAAC,KAAA,kBAAAC,MAAA,cAAAC,QAAA,mCAA8IC","file":"path---call-and-apply-85da80e8a3dc391e0a76.js","sourcesContent":["webpackJsonp([105308378646500],{\n\n/***/ 370:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>개인적인 공부 노트로, 오류가 있을 수 있습니다.</p>\\n</blockquote>\\n<h2>1. apply</h2>\\n<p><code>call</code>과 <code>apply</code>는 기능 — 함수 호출하기 — 은 같고 받는 인자만 다르다. 둘다 <code>this</code> 키워드를 특정 객체에 바인딩 하는 메소드이다. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">func<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> argsArray<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>첫번째 인자는 <code>this</code>를 바인딩할 객체, 두번째 인자는 함수를 호출할 인자들의 배열이다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Person</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> me <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nPerson<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>me<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"Jane\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"15\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>이렇게 빈 객체를 만든 뒤, 생성자를 쓰지 않고 Person 객체에 prototype을 연결하여 상속한 것처럼 만들 수도 있다. 하지만 <code>Person.prototype</code>으로 연결된 것은 아니고 함수를 호출한 것일 뿐이다.</li>\\n</ul>\\n<hr>\\n<h2>2. call</h2>\\n<p>apply와 기능은 같다. 단, 두번째 인자를 배열에 넣지 않고 그대로 넘겨주면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>me<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Jane\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"15\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><code>this</code>는 method가 아니라 caller에 의해 결정된다. <code>obj.method()</code>와 <code>method.call(obj)</code>는 같다는 것에서 유추할 수 있다.</li>\\n</ul>\\n<p>👉 언제 사용할까?</p>\\n<ul>\\n<li><code>apply</code>와 <code>call</code> 모두 <code>NodeList</code> 등과 같은 유사 배열 객체에 배열 메소드를 쓰고 싶을 때 사용한다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 이렇게</span>\\nArray<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>pseudoArray<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>3. bind</h2>\\n<ul>\\n<li>bind를 사용하면 콜백을 호출할 때, 맥락에 상관없이 특정 this에 대하여(특정 객체에 대하여) 호출할 수 있다. </li>\\n<li>this의 맥락은 어디에서 쓰이느냐에 따라 달라지기 때문에 언제 쓰이든지 같은 동작을 기대할 때 주로 쓰인다.</li>\\n</ul>\\n<p>👉 <a href=\\\"https://reactjs.org/docs/handling-events.html\\\">React에서 bind()</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> isToggleOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// This binding is necessary to make `this` work in the callback</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>prevState <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      isToggleOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>prevState<span class=\\\"token punctuation\\\">.</span>isToggleOn\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isToggleOn <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'ON'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OFF'</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>button의 <code>onClick</code>의 콜백으로 <code>this.handleClick</code>을 불러올 때, this는 <code>undefined</code>가 된다. 자바스크립트에서 클래스 메소드는 디폴트로 바인딩되지 않기 때문이다. </li>\\n<li>따라서 <code>this.handleClick = this.handleClick.bind(this);</code> 이렇게 메소드에 this(Toggle)을 반드시 바인딩해주어야한다.</li>\\n<li>\\n<p>다른 방법 👇</p>\\n<ul>\\n<li>*babel 플러그인 <code>transform-class-properties</code>이 디폴트 바인딩을 지원하며, <code>create-react-app</code>에서도 이를 사용하고 있다.</li>\\n<li>또는 <code>onClick={(e) => this.handleClick(e)}</code>와 같이 arrow function 안에서 쓸수도 있다.</li>\\n</ul>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"call, apply and bind\",\"date\":\"2018-04-14\",\"path\":\"/call-and-apply\",\"tags\":[\"javascript\"],\"excerpt\":\"What is call, apply and bind?\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---call-and-apply-85da80e8a3dc391e0a76.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>개인적인 공부 노트로, 오류가 있을 수 있습니다.</p>\\n</blockquote>\\n<h2>1. apply</h2>\\n<p><code>call</code>과 <code>apply</code>는 기능 — 함수 호출하기 — 은 같고 받는 인자만 다르다. 둘다 <code>this</code> 키워드를 특정 객체에 바인딩 하는 메소드이다. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">func<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> argsArray<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>첫번째 인자는 <code>this</code>를 바인딩할 객체, 두번째 인자는 함수를 호출할 인자들의 배열이다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Person</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> age<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>age <span class=\\\"token operator\\\">=</span> age\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> me <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\nPerson<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>me<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"Jane\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"15\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>이렇게 빈 객체를 만든 뒤, 생성자를 쓰지 않고 Person 객체에 prototype을 연결하여 상속한 것처럼 만들 수도 있다. 하지만 <code>Person.prototype</code>으로 연결된 것은 아니고 함수를 호출한 것일 뿐이다.</li>\\n</ul>\\n<hr>\\n<h2>2. call</h2>\\n<p>apply와 기능은 같다. 단, 두번째 인자를 배열에 넣지 않고 그대로 넘겨주면 된다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>me<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Jane\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"15\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><code>this</code>는 method가 아니라 caller에 의해 결정된다. <code>obj.method()</code>와 <code>method.call(obj)</code>는 같다는 것에서 유추할 수 있다.</li>\\n</ul>\\n<p>👉 언제 사용할까?</p>\\n<ul>\\n<li><code>apply</code>와 <code>call</code> 모두 <code>NodeList</code> 등과 같은 유사 배열 객체에 배열 메소드를 쓰고 싶을 때 사용한다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 이렇게</span>\\nArray<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>slice<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>pseudoArray<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>3. bind</h2>\\n<ul>\\n<li>bind를 사용하면 콜백을 호출할 때, 맥락에 상관없이 특정 this에 대하여(특정 객체에 대하여) 호출할 수 있다. </li>\\n<li>this의 맥락은 어디에서 쓰이느냐에 따라 달라지기 때문에 언제 쓰이든지 같은 동작을 기대할 때 주로 쓰인다.</li>\\n</ul>\\n<p>👉 <a href=\\\"https://reactjs.org/docs/handling-events.html\\\">React에서 bind()</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Toggle</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> isToggleOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// This binding is necessary to make `this` work in the callback</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>prevState <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      isToggleOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">!</span>prevState<span class=\\\"token punctuation\\\">.</span>isToggleOn\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>isToggleOn <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'ON'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'OFF'</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>button의 <code>onClick</code>의 콜백으로 <code>this.handleClick</code>을 불러올 때, this는 <code>undefined</code>가 된다. 자바스크립트에서 클래스 메소드는 디폴트로 바인딩되지 않기 때문이다. </li>\\n<li>따라서 <code>this.handleClick = this.handleClick.bind(this);</code> 이렇게 메소드에 this(Toggle)을 반드시 바인딩해주어야한다.</li>\\n<li>\\n<p>다른 방법 👇</p>\\n<ul>\\n<li>*babel 플러그인 <code>transform-class-properties</code>이 디폴트 바인딩을 지원하며, <code>create-react-app</code>에서도 이를 사용하고 있다.</li>\\n<li>또는 <code>onClick={(e) => this.handleClick(e)}</code>와 같이 arrow function 안에서 쓸수도 있다.</li>\\n</ul>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"call, apply and bind\",\"date\":\"2018-04-14\",\"path\":\"/call-and-apply\",\"tags\":[\"javascript\"],\"excerpt\":\"What is call, apply and bind?\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/call-and-apply.json\n// module id = 370\n// module chunks = 105308378646500"],"sourceRoot":""}