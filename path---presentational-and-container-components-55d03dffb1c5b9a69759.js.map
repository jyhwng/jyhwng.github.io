{"version":3,"sources":["webpack:///path---presentational-and-container-components-55d03dffb1c5b9a69759.js","webpack:///./.cache/json/presentational-and-container-components.json"],"names":["webpackJsonp","387","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,skLAAuvLC,aAAqDC,MAAA,kCAAAC,KAAA,aAAAC,KAAA,2CAAAC,MAAA,sBAAAC,QAAA,qDAA4MC","file":"path---presentational-and-container-components-55d03dffb1c5b9a69759.js","sourcesContent":["webpackJsonp([104302916089247],{\n\n/***/ 387:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>1. What is it?</h2>\\n<p>UI를 담당하는 컴포넌트와 데이터를 주고 받는 컴포넌트를 분리하는 패턴이다. React 공식 문서의 <a href=\\\"https://reactjs.org/docs/lifting-state-up.html\\\">'Lifting State Up'</a>(공통된 조상으로 state를 올려서 관리하는 것)의 응용이라고 볼 수 있다. Separation of concern을 따르고 특히 stateless component의 경우, 재사용이 용이하다는 장점이 있다. </p>\\n<p>출처: </p>\\n<ul>\\n<li><a href=\\\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\\\">Presentational and Container Components\\n</a></li>\\n<li><a href=\\\"http://americanexpress.io/clean-code-dirty-code/\\\">Clean Code vs. Dirty Code: React Best Practices\\n</a></li>\\n</ul>\\n<hr>\\n<h2>2. Stateless component</h2>\\n<ol start=\\\"0\\\">\\n<li>'How things look' 에 관한 것이다.</li>\\n<li>보통 state나 lifecycle hook을 갖지 않는 functional 컴포넌트이다. state가 있다면 UI와 관련된 것이다. (ex. toggle) 그래서 타입스크립트에서는 보통 Stateless Functional Component로 정의한다. </li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> string\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> Hello<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>SFC<span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>데이터와 콜백도 prop을 통해서만 받는다.</li>\\n</ol>\\n<hr>\\n<h2>3. Container component</h2>\\n<ol start=\\\"0\\\">\\n<li>'How things work' 에 관한 것이다.</li>\\n<li>보통 DOM markup을 갖지 않고 데이터를 로드하고 변경하는 역할만 담당한다. </li>\\n<li>class 컴포넌트로 state를 갖고 있으며 데이터 소스의 역할을 한다. </li>\\n<li>하위 컴포넌트에 콜백과 데이터를 prop으로 보낸다. 콜백함수도 prop으로 던져서 자식 단에서 trigger 할 수 있기 때문에, 데이터를 한 곳에서 받아서 변경하는 것이 가능하다.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  options<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">State</span> <span class=\\\"token punctuation\\\">{</span>\\n  selectedOption<span class=\\\"token punctuation\\\">:</span> string\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SelectOptions</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token punctuation\\\">,</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> selectedOption<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleSelectOption</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> selectedOption<span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// 데이터 변경하기</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>StatelessComponent\\n        options<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>options<span class=\\\"token punctuation\\\">}</span>  <span class=\\\"token comment\\\">// 데이터 보내기</span>\\n        onSelectOption<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleSelectOption<span class=\\\"token punctuation\\\">}</span>  <span class=\\\"token comment\\\">// 콜백 보내기</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Stateless Component & Container\",\"date\":\"2018-04-16\",\"path\":\"/presentational-and-container-components\",\"tags\":[\"react\",\"javascript\"],\"excerpt\":\"Build React with separation of concerns in mind\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---presentational-and-container-components-55d03dffb1c5b9a69759.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>1. What is it?</h2>\\n<p>UI를 담당하는 컴포넌트와 데이터를 주고 받는 컴포넌트를 분리하는 패턴이다. React 공식 문서의 <a href=\\\"https://reactjs.org/docs/lifting-state-up.html\\\">'Lifting State Up'</a>(공통된 조상으로 state를 올려서 관리하는 것)의 응용이라고 볼 수 있다. Separation of concern을 따르고 특히 stateless component의 경우, 재사용이 용이하다는 장점이 있다. </p>\\n<p>출처: </p>\\n<ul>\\n<li><a href=\\\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\\\">Presentational and Container Components\\n</a></li>\\n<li><a href=\\\"http://americanexpress.io/clean-code-dirty-code/\\\">Clean Code vs. Dirty Code: React Best Practices\\n</a></li>\\n</ul>\\n<hr>\\n<h2>2. Stateless component</h2>\\n<ol start=\\\"0\\\">\\n<li>'How things look' 에 관한 것이다.</li>\\n<li>보통 state나 lifecycle hook을 갖지 않는 functional 컴포넌트이다. state가 있다면 UI와 관련된 것이다. (ex. toggle) 그래서 타입스크립트에서는 보통 Stateless Functional Component로 정의한다. </li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> string\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> Hello<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>SFC<span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>데이터와 콜백도 prop을 통해서만 받는다.</li>\\n</ol>\\n<hr>\\n<h2>3. Container component</h2>\\n<ol start=\\\"0\\\">\\n<li>'How things work' 에 관한 것이다.</li>\\n<li>보통 DOM markup을 갖지 않고 데이터를 로드하고 변경하는 역할만 담당한다. </li>\\n<li>class 컴포넌트로 state를 갖고 있으며 데이터 소스의 역할을 한다. </li>\\n<li>하위 컴포넌트에 콜백과 데이터를 prop으로 보낸다. 콜백함수도 prop으로 던져서 자식 단에서 trigger 할 수 있기 때문에, 데이터를 한 곳에서 받아서 변경하는 것이 가능하다.</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  options<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">State</span> <span class=\\\"token punctuation\\\">{</span>\\n  selectedOption<span class=\\\"token punctuation\\\">:</span> string\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SelectOptions</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token punctuation\\\">,</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> selectedOption<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function-variable function\\\">handleSelectOption</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> selectedOption<span class=\\\"token punctuation\\\">:</span> value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\">// 데이터 변경하기</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>StatelessComponent\\n        options<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>options<span class=\\\"token punctuation\\\">}</span>  <span class=\\\"token comment\\\">// 데이터 보내기</span>\\n        onSelectOption<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleSelectOption<span class=\\\"token punctuation\\\">}</span>  <span class=\\\"token comment\\\">// 콜백 보내기</span>\\n      <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Stateless Component & Container\",\"date\":\"2018-04-16\",\"path\":\"/presentational-and-container-components\",\"tags\":[\"react\",\"javascript\"],\"excerpt\":\"Build React with separation of concerns in mind\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/presentational-and-container-components.json\n// module id = 387\n// module chunks = 104302916089247"],"sourceRoot":""}