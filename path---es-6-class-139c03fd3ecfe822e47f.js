webpackJsonp([0x608bd096cebc],{379:function(n,s){n.exports={data:{markdownRemark:{html:'<blockquote>\n<p>개인적인 공부 노트로, 내용에 오류가 있을 수 있습니다.</p>\n</blockquote>\n<p>ES6의 <code>class</code>도 사실 function이다.(<code>typeof</code>를 찍으면 <code>"function"</code>으로 나온다.) 단지 prototype 기반 상속보다 명확하게 표현하기 위한 syntatic sugar일 뿐!</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 클래스 바디 안에는 메소드만이 들어간다. constructor()도 메소드이다.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li><code>class</code> 안에서는 function 키워드를 쓰지 않는다. <code>method()</code>은 사실 <code>method: function ()</code>을 짧게 줄인 것이다.</li>\n</ul>\n<hr>\n<h2>1. <code>constructor</code> 메소드</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 객체 생성하기</span>\n<span class="token keyword">var</span> earlGray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token string">"Earl gray"</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<ul>\n<li>객체를 생성하는 시점에 호출되는 메소드이다. Python 의 초기화 함수 <code>__init__()</code>와 같다. </li>\n<li>객체 생성 시 필요한 parameter를 명시한다.</li>\n<li>class에서 constructor는 있을 수도, 없을 수도 있다. </li>\n</ul>\n<hr>\n<p>👉 React 에서 <code>constructor()</code> 생략하기</p>\n<ul>\n<li><code>constructor()</code> 안에 <code>this.state</code>를 정의하지 않고 클래스 바디 안에서 바로 <code>state</code>로 정의하는 경우가 있다. babel의 <a href="https://www.fullstackreact.com/articles/use-property-initializers-for-cleaner-react-components/#with-property-initializers">property initializer</a> 기능 때문이다. </li>\n<li><code>transform-class-properties</code> babel plugin을 사용한다면 <code>constructor()</code>를 호출하지 않고도 <code>this</code>에 접근할 수 있다. 이러한 패턴은 더 깔끔한 코드를 위해 권장되며 널리 사용되고 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// before</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doSomething<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// after</span>\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// state를 constructor 안에 쓰지 않아도 된다!</span>\n    <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   <span class="token comment">// this 바인딩을 하지 않아도 된다!</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>👉 왜 arrow function은 this 바인딩을 하지 않아도 될까?</p>\n<ul>\n<li><a href="https://twitter.com/dan_abramov/status/790612782471319553">To bind or not to bind?</a> - Dan Abramov</li>\n</ul>\n<hr>\n<h2>2. <code>super()</code></h2>\n<ul>\n<li>\n<p>부모 객체의 함수를 호출할 때 사용한다.</p>\n<ul>\n<li><code>super(args)</code> : 부모 객체의 생성자 함수 호출</li>\n<li><code>super.func(args)</code> : 부모 객체의 <code>func()</code> 메소드 호출</li>\n</ul>\n</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Polygon</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width\n        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height\n    <span class="token punctuation">}</span>\n    <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Polygon</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>sideLength<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>sideLength<span class="token punctuation">,</span> sideLength<span class="token punctuation">)</span>   <span class="token comment">// Polygon 의 constructor를 그대로 사용한다.</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color  <span class="token comment">// Polygon 의 constructor에 더해서 새로운 property를 정할 수도 있다.</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span>  <span class="token comment">// 4 => Polygon의 get area() 메소드를 사용할 수 있다.</span>\n</code></pre>\n      </div>\n<ul>\n<li>자식 클래스의 <code>constructor()</code>안에서는 <code>super()</code>를 호출하기 전까지 <code>this</code>에 접근할 수 없다. (<a href="https://stackoverflow.com/questions/31067368/how-to-extend-a-class-without-having-to-using-super-in-es6">출처</a>) super()를 써주지 않고 this에 접근하면 아래와 같은 오류가 발생한다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code class="language-none">> Must call super constructor in derived class before accessing \'this\' or returning from derived constructor</code></pre>\n      </div>\n<hr>\n<h2>3. 멤버 메소드와 <code>static</code> 메소드</h2>\n<ul>\n<li>\n<p>클래스 단에서 바로 호출하는 메소드.</p>\n<ul>\n<li>인스턴스별로 달라지지 않고 클래스 단에서 쓰는 utility 를 만들고 싶을 때 사용한다. </li>\n</ul>\n</li>\n<li>인스턴스는 <code>static</code> 메소드를 사용할 수 없다. 반대로 클래스는 멤버 함수를 바로 쓸 수 없다. (인스턴스를 생성하고 인스턴스 단에서 실행해야 한다.)</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 멤버 메소드</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\na<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// static 메소드</span>\nA<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<hr>\n<h2>4. <code>extends</code></h2>\n<ul>\n<li>부모 클래스를 상속받을 수 있는 키워드이다. </li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Tea</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name   <span class="token comment">// Uncaught ReferenceError 오류 발생 (Must call super constructor in derived class before accessing \'this\' or returning from derived constructor)</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> color<span class="token punctuation">)</span>  <span class="token comment">// super() 로 생성자 함수 호출해야 this에 접근할 수 있음.</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color\n    <span class="token punctuation">}</span>   \n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>👉 더 읽을 거리 - <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes#ES5_%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85_%EC%83%81%EC%86%8D_%EB%AC%B8%EB%B2%95%EA%B3%BC_ES6_%ED%81%B4%EB%9E%98%EC%8A%A4_%EC%83%81%EC%86%8D_%EB%AC%B8%EB%B2%95%EC%9D%98_%EB%B9%84%EA%B5%90">생성자 함수로 상속 구현하기</a></p>\n<hr>\n<h3>React에서 <code>extends</code></h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// React에서 `constructor() {}` 메소드는 언제나 그 안에서 `super()`메소드를 불러야 한다. 이걸 쓰지 않으면 `missing super() call in constructor` 에러가 난다.</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// `React.Component`를 상속받았기 때문에 그 안에 정의되어 있는 `.setState()`메소드를 사용할 수 있다.</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<hr>\n<p>참고 </p>\n<ul>\n<li><a href="https://hacks.mozilla.org/2015/07/es6-in-depth-classes/">Mozilla Hacks</a></li>\n<li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes">Classes - Javascript, MDN</a></li>\n</ul>',frontmatter:{title:"Classes",date:"2017-12-30",path:"/es6-class",tags:["es6","Javascript"],excerpt:"ES6 in depth"}}},pathContext:{}}}});
//# sourceMappingURL=path---es-6-class-139c03fd3ecfe822e47f.js.map