{"version":3,"sources":["webpack:///path---typescript-basic-d2e25b9f6c6be9d8048a.js","webpack:///./.cache/json/typescript-basic.json"],"names":["webpackJsonp","389","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,s0sBAAuouBC,aAAqDC,MAAA,mBAAAC,KAAA,aAAAC,KAAA,oBAAAC,MAAA,cAAAC,QAAA,MAA+GC","file":"path---typescript-basic-d2e25b9f6c6be9d8048a.js","sourcesContent":["webpackJsonp([10746375541928],{\n\n/***/ 389:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>1. Typescript 란?</h2>\\n<ol>\\n<li>\\n<p>강타입의 자바스크립트 - 자바스크립트는 동적 타입 언어(dynamically typed language)이다. 타입스크립트는 정적 타입 자바스크립트(statically typed javascript)이다.</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://medium.com/@gaperton/typescript-static-or-dynamic-64bceb50b93e\\\">동적 타입, 정적타입이란?</a></p>\\n</li>\\n<li>\\n<p>동적 타입: 타입이 value(주로 반환되는 값)와 연결되어 있고, 런타임에 체킹된다.</p>\\n</li>\\n<li>\\n<p>정적 타입: 타입이 variable 과 연결되어 있고, 컴파일 단계에서 체킹된다.</p>\\n</li>\\n<li>\\n<p>타입의 종류 : <code>number | string | boolean | undefined | null | object | symbol</code> (ES6 에서 추가된 타입)</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>\\\"Javascript that scales\\\"</p>\\n<ul>\\n<li>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. (공식사이트)</li>\\n<li>Typescript is a language for application scale Javascript.(Github)</li>\\n</ul>\\n</li>\\n</ol>\\n<p><img src=\\\"https://qph.fs.quoracdn.net/main-qimg-b4ea5e4175b7ea1105895f131e9614cc.webp\\\" alt=\\\"typscript-superset\\\"></p>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>Compiler</p>\\n<ul>\\n<li>최신 ECMAScript 를 타이트하게 반영하는 superset/compiler 이다. config 에서 어떤 버전을 쓸지 지정한다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// tsconfig.json</span>\\n<span class=\\\"token string\\\">\\\"compilerOptions\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token string\\\">\\\"module\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"commonjs\\\"</span><span class=\\\"token punctuation\\\">,</span>    <span class=\\\"token comment\\\">// \\\"esnext\\\" 해야 chunk file 가능해짐</span>\\n   <span class=\\\"token string\\\">\\\"target\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"es5\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"moduleResolution\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"node\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"strictNullChecks\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"noUnusedLocals\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"removeComments\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>타입스크립트는 컴파일 단계에서 타입 체킹이 되기도 하지만 IDE 에서 코드를 쓸 때부터 체킹이 되기도 한다. (파일 확장자명을 <code>.ts</code>(jsx 에 대해선 <code>.tsx</code>)로 쓴다.)</li>\\n</ul>\\n</li>\\n</ol>\\n<hr>\\n<h2>2. 장점</h2>\\n<ol>\\n<li>\\n<p>클라이언트단에서 어떤 값을 줬는지 매번 값을 파싱해서 수정하거나, validation 해주지 않아도 됨</p>\\n<ul>\\n<li>unit test 를 할 때도, type checking 을 하지 않아도 된다.</li>\\n</ul>\\n</li>\\n<li>\\n<p>코드(특히 interface) 자체가 명세서가 된다.</p>\\n<ul>\\n<li>string, number 등의 primitive type 는 당연히 체킹되고, method 의 작동 방식도 미리 정의해둘 수 있다.</li>\\n</ul>\\n</li>\\n<li>\\n<p>더 나은 에러</p>\\n<ul>\\n<li>컴파일 단계에서, 또는 코드를 쓰는 단계에서에러도 <code>...is undefined</code> 보다 도움이 되는 에러 메시지가 나온다.\\n<a href=\\\"https://medium.freecodecamp.org/typescript-javascript-with-super-powers-a333b0fcabc9\\\">https://medium.freecodecamp.org/typescript-javascript-with-super-powers-a333b0fcabc9</a>\\n<a href=\\\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\\\">https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html</a>\\ntypescript gives all the benefits of ES6, plus more productivity</li>\\n</ul>\\n</li>\\n<li>\\n<p>Typescript 에서 정의해준 빌트인 DOM APIs 에서 import 해서 쓰면 너무나 편리!</p>\\n</li>\\n</ol>\\n<hr>\\n<h2>3. Basic syntax</h2>\\n<p><a href=\\\"https://typescriptcourses.com/typescript-fundamentals\\\">https://typescriptcourses.com/typescript-fundamentals</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> test<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> T <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> arg\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toFixed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\">// ok</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toFixed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>     <span class=\\\"token comment\\\">// 에러남</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'James'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>    <span class=\\\"token comment\\\">// ok</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>    <span class=\\\"token comment\\\">// 에러남</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>첫번째 T 는 타입 이름 정의 (<code>interface T {}</code> 처럼 정의해서 쓸 때. arg 와 return 값이 primitive 면 굳이 필요없음)</li>\\n<li>두번째 T 는 그 타입을 arg 를 받을 때 쓴다는 거고</li>\\n<li>\\n<p>세번째 T 는 리턴 값도 그 타입이어야 한다는 뜻. (즉 이 함수는 인풋과 리턴의 타입이 같아야하는 함수)</p>\\n<ul>\\n<li>그래서 <code>test(1).toFixed()</code> 에서 <code>test(1)</code>의 리턴값이 number 이기 때문에 number 의 멤버함수 <code>.toFixed()</code>를 쓸 수 있다.</li>\\n<li>두번째도 마찬가지, 리턴값이 자동으로 string 이기 때문에 바로 <code>.substring</code> 을 붙여써도 에러가 나지 않는다. 자바스크립트였다면 런타임에 에러가 났을 것.</li>\\n<li>그러나 만약에 함수가 <code>function test&#x3C;T>(arg: number): number {}</code> 이런식으로 정의되어 있었다면, 두번째는 에러가 날것.</li>\\n</ul>\\n</li>\\n</ol>\\n<hr>\\n<h2>4. Generic 이란?</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> number <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arg<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> any<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> any <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arg<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 두개가 있으면 아래처럼 쓸 수 있는걸 generic.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> identity<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> T <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arg<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>5. import</h2>\\n<p><code>import \\\\* TS1192: Module has no default export.</code>와 같은 타입스크립트 에러 해결하기</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 이렇게 해서 에러가 나면</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Waypoint <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-waypoint\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Waypoint <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-waypoint\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 이렇게 바꿔보자</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> Waypoint <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-waypoint\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>default export 가 없을 경우에 이런 에러가 남</li>\\n</ul>\\n<hr>\\n<h2>6. enum</h2>\\n<ul>\\n<li>\\n<p>enumerate: 열거하다. 특정 값들을 associate 하는 것</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">enum</span> Transport <span class=\\\"token punctuation\\\">{</span>\\ntrain<span class=\\\"token punctuation\\\">,</span>\\nbus<span class=\\\"token punctuation\\\">,</span>\\nbike<span class=\\\"token punctuation\\\">,</span>\\ncar\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> myTransport <span class=\\\"token operator\\\">=</span> Transport<span class=\\\"token punctuation\\\">.</span>bus<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myTransport<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>Type 'string' is not assignable to type '\\\"tier\\\" | \\\"episode\\\" | \\\"milestone\\\"'. 에러 슈팅하기</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// don't</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"tier\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"episode\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"milestone\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// do</span>\\n<span class=\\\"token keyword\\\">enum</span> B <span class=\\\"token punctuation\\\">{</span>\\n  tier<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"tier\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  episode<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"episode\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  milestone<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"milestone\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> B\\n<span class=\\\"token punctuation\\\">}</span>\\n`\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<hr>\\n<h2>7. type assertion <code>as</code></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> HTMLElement\\nHTMLElement <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token comment\\\">// 또는</span>\\ndocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>'root’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token comment\\\">// removes null and undefined from the prior expression</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>8. namespace &#x26; interface</h2>\\n<ol>\\n<li>\\n<p>interface : propTypes 등록 + 그들의 타입 지정</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// props 와 state가 type이 있다고 선언하는 부분.(그 타입이 뭔지는 다른 곳에 정의한다.) 컴포넌트에서 항상 타입을 지정해줄 땐 이 두 개를 넘겨야 한다.</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token punctuation\\\">,</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n   props<span class=\\\"token punctuation\\\">:</span> Props<span class=\\\"token punctuation\\\">;</span>\\n   state<span class=\\\"token punctuation\\\">:</span> State<span class=\\\"token punctuation\\\">;</span>\\n\\n   <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">:</span> Props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// namespace는 단순히 props가 어디 속한 애인지 알려주는 역할</span>\\n<span class=\\\"token keyword\\\">export</span> namespace Comp <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token comment\\\">// interface는 원래 아래 class 내에서 정의되었던 {prop1: prop1Type}들을 따로 모아둔 곳. 이제는 AProps란 이름으로 아래 {prop: prop1Type}의 모음에 접근할 수 있다.</span>\\n   <span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AProps</span> <span class=\\\"token punctuation\\\">{</span>\\n       prop1<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n       prop2<span class=\\\"token punctuation\\\">:</span> number<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token comment\\\">// export interface AState {</span>\\n   <span class=\\\"token comment\\\">//    attr: string;</span>\\n   <span class=\\\"token comment\\\">//    show: boolean;</span>\\n   <span class=\\\"token comment\\\">// }</span>\\n   <span class=\\\"token comment\\\">// 와 같이 선언하고 아래에서 Comp.AState로 받아올 수도 있다.</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ntype AState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n   attr<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n   show<span class=\\\"token punctuation\\\">:</span> boolean<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token operator\\\">&lt;</span>Comp<span class=\\\"token punctuation\\\">.</span>AProps<span class=\\\"token punctuation\\\">,</span> AState<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">:</span> Comp<span class=\\\"token punctuation\\\">.</span>AProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n       <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n           attr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>props<span class=\\\"token punctuation\\\">.</span>prop1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>props<span class=\\\"token punctuation\\\">.</span>prop2<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span>\\n           show<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n           <span class=\\\"token comment\\\">// show: 1</span>\\n       <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> prop1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'prop1'</span><span class=\\\"token punctuation\\\">,</span> prop2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">123</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// const b = new A({ wrong: 'prop1', prop2: \\\"123\\\" });</span>\\n<span class=\\\"token comment\\\">// const b = new A({ prop1: 1, prop2: \\\"123\\\" });</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>The interface LabelledValue is a name we can now use to describe the requirement in the previous example (<a href=\\\"https://www.typescriptlang.org/docs/handbook/interfaces.html\\\">https://www.typescriptlang.org/docs/handbook/interfaces.html</a>)\\ninterface Props {} 와 type Props = Array<string> 의 차이\\ninterface 는 object 이기 때문에 여러개의 key-value pair 로 확장이 가능</p>\\n</li>\\n</ol>\\n<hr>\\n<h2>9. void</h2>\\n<ol>\\n<li>\\n<p>typescript 에서 리턴값이 없는 함수를 정의할 때\\n<a href=\\\"https://www.typescriptlang.org/docs/handbook/basic-types.html\\\">https://www.typescriptlang.org/docs/handbook/basic-types.html</a></p>\\n</li>\\n<li>\\n<p><a href=\\\"https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html\\\">https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html</a> - Don’t use the return type any for callbacks whose value will be ignored:</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">/* WRONG */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> any<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">x</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Use the return type void for callbacks whose value will be ignored:</span>\\n<span class=\\\"token comment\\\">/* OK */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">x</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Why: Using void is safer because it prevents you from accidently using the return value of x in an unchecked way:</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">x</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// oops! meant to do something else</span>\\n  k<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// error, but would be OK if the return type had been 'any'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 정의할 때</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">warnUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"This is my warning message\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// prop으로 받을 때</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  onSubmit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Typescript Basic\",\"date\":\"2018-09-19\",\"path\":\"/typescript-basic\",\"tags\":[\"typescript\"],\"excerpt\":\"\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---typescript-basic-d2e25b9f6c6be9d8048a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>1. Typescript 란?</h2>\\n<ol>\\n<li>\\n<p>강타입의 자바스크립트 - 자바스크립트는 동적 타입 언어(dynamically typed language)이다. 타입스크립트는 정적 타입 자바스크립트(statically typed javascript)이다.</p>\\n<ul>\\n<li>\\n<p><a href=\\\"https://medium.com/@gaperton/typescript-static-or-dynamic-64bceb50b93e\\\">동적 타입, 정적타입이란?</a></p>\\n</li>\\n<li>\\n<p>동적 타입: 타입이 value(주로 반환되는 값)와 연결되어 있고, 런타임에 체킹된다.</p>\\n</li>\\n<li>\\n<p>정적 타입: 타입이 variable 과 연결되어 있고, 컴파일 단계에서 체킹된다.</p>\\n</li>\\n<li>\\n<p>타입의 종류 : <code>number | string | boolean | undefined | null | object | symbol</code> (ES6 에서 추가된 타입)</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>\\\"Javascript that scales\\\"</p>\\n<ul>\\n<li>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. (공식사이트)</li>\\n<li>Typescript is a language for application scale Javascript.(Github)</li>\\n</ul>\\n</li>\\n</ol>\\n<p><img src=\\\"https://qph.fs.quoracdn.net/main-qimg-b4ea5e4175b7ea1105895f131e9614cc.webp\\\" alt=\\\"typscript-superset\\\"></p>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>Compiler</p>\\n<ul>\\n<li>최신 ECMAScript 를 타이트하게 반영하는 superset/compiler 이다. config 에서 어떤 버전을 쓸지 지정한다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// tsconfig.json</span>\\n<span class=\\\"token string\\\">\\\"compilerOptions\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token string\\\">\\\"module\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"commonjs\\\"</span><span class=\\\"token punctuation\\\">,</span>    <span class=\\\"token comment\\\">// \\\"esnext\\\" 해야 chunk file 가능해짐</span>\\n   <span class=\\\"token string\\\">\\\"target\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"es5\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"moduleResolution\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"node\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"strictNullChecks\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"noUnusedLocals\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n   <span class=\\\"token string\\\">\\\"removeComments\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>타입스크립트는 컴파일 단계에서 타입 체킹이 되기도 하지만 IDE 에서 코드를 쓸 때부터 체킹이 되기도 한다. (파일 확장자명을 <code>.ts</code>(jsx 에 대해선 <code>.tsx</code>)로 쓴다.)</li>\\n</ul>\\n</li>\\n</ol>\\n<hr>\\n<h2>2. 장점</h2>\\n<ol>\\n<li>\\n<p>클라이언트단에서 어떤 값을 줬는지 매번 값을 파싱해서 수정하거나, validation 해주지 않아도 됨</p>\\n<ul>\\n<li>unit test 를 할 때도, type checking 을 하지 않아도 된다.</li>\\n</ul>\\n</li>\\n<li>\\n<p>코드(특히 interface) 자체가 명세서가 된다.</p>\\n<ul>\\n<li>string, number 등의 primitive type 는 당연히 체킹되고, method 의 작동 방식도 미리 정의해둘 수 있다.</li>\\n</ul>\\n</li>\\n<li>\\n<p>더 나은 에러</p>\\n<ul>\\n<li>컴파일 단계에서, 또는 코드를 쓰는 단계에서에러도 <code>...is undefined</code> 보다 도움이 되는 에러 메시지가 나온다.\\n<a href=\\\"https://medium.freecodecamp.org/typescript-javascript-with-super-powers-a333b0fcabc9\\\">https://medium.freecodecamp.org/typescript-javascript-with-super-powers-a333b0fcabc9</a>\\n<a href=\\\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\\\">https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html</a>\\ntypescript gives all the benefits of ES6, plus more productivity</li>\\n</ul>\\n</li>\\n<li>\\n<p>Typescript 에서 정의해준 빌트인 DOM APIs 에서 import 해서 쓰면 너무나 편리!</p>\\n</li>\\n</ol>\\n<hr>\\n<h2>3. Basic syntax</h2>\\n<p><a href=\\\"https://typescriptcourses.com/typescript-fundamentals\\\">https://typescriptcourses.com/typescript-fundamentals</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> test<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> T <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> arg\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toFixed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\">// ok</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toFixed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>     <span class=\\\"token comment\\\">// 에러남</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'James'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>    <span class=\\\"token comment\\\">// ok</span>\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>    <span class=\\\"token comment\\\">// 에러남</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>첫번째 T 는 타입 이름 정의 (<code>interface T {}</code> 처럼 정의해서 쓸 때. arg 와 return 값이 primitive 면 굳이 필요없음)</li>\\n<li>두번째 T 는 그 타입을 arg 를 받을 때 쓴다는 거고</li>\\n<li>\\n<p>세번째 T 는 리턴 값도 그 타입이어야 한다는 뜻. (즉 이 함수는 인풋과 리턴의 타입이 같아야하는 함수)</p>\\n<ul>\\n<li>그래서 <code>test(1).toFixed()</code> 에서 <code>test(1)</code>의 리턴값이 number 이기 때문에 number 의 멤버함수 <code>.toFixed()</code>를 쓸 수 있다.</li>\\n<li>두번째도 마찬가지, 리턴값이 자동으로 string 이기 때문에 바로 <code>.substring</code> 을 붙여써도 에러가 나지 않는다. 자바스크립트였다면 런타임에 에러가 났을 것.</li>\\n<li>그러나 만약에 함수가 <code>function test&#x3C;T>(arg: number): number {}</code> 이런식으로 정의되어 있었다면, 두번째는 에러가 날것.</li>\\n</ul>\\n</li>\\n</ol>\\n<hr>\\n<h2>4. Generic 이란?</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> number <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arg<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">identity</span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> any<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> any <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arg<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 두개가 있으면 아래처럼 쓸 수 있는걸 generic.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> identity<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>arg<span class=\\\"token punctuation\\\">:</span> T<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> T <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arg<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>5. import</h2>\\n<p><code>import \\\\* TS1192: Module has no default export.</code>와 같은 타입스크립트 에러 해결하기</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 이렇게 해서 에러가 나면</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Waypoint <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-waypoint\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> Waypoint <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-waypoint\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 이렇게 바꿔보자</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> Waypoint <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react-waypoint\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>default export 가 없을 경우에 이런 에러가 남</li>\\n</ul>\\n<hr>\\n<h2>6. enum</h2>\\n<ul>\\n<li>\\n<p>enumerate: 열거하다. 특정 값들을 associate 하는 것</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">enum</span> Transport <span class=\\\"token punctuation\\\">{</span>\\ntrain<span class=\\\"token punctuation\\\">,</span>\\nbus<span class=\\\"token punctuation\\\">,</span>\\nbike<span class=\\\"token punctuation\\\">,</span>\\ncar\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> myTransport <span class=\\\"token operator\\\">=</span> Transport<span class=\\\"token punctuation\\\">.</span>bus<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myTransport<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>Type 'string' is not assignable to type '\\\"tier\\\" | \\\"episode\\\" | \\\"milestone\\\"'. 에러 슈팅하기</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// don't</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"tier\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"episode\\\"</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"milestone\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// do</span>\\n<span class=\\\"token keyword\\\">enum</span> B <span class=\\\"token punctuation\\\">{</span>\\n  tier<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"tier\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  episode<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"episode\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  milestone<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"milestone\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> B\\n<span class=\\\"token punctuation\\\">}</span>\\n`\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<hr>\\n<h2>7. type assertion <code>as</code></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'root'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">as</span> HTMLElement\\nHTMLElement <span class=\\\"token operator\\\">|</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token comment\\\">// 또는</span>\\ndocument<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span>'root’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">!</span>\\n<span class=\\\"token comment\\\">// removes null and undefined from the prior expression</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>8. namespace &#x26; interface</h2>\\n<ol>\\n<li>\\n<p>interface : propTypes 등록 + 그들의 타입 지정</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// props 와 state가 type이 있다고 선언하는 부분.(그 타입이 뭔지는 다른 곳에 정의한다.) 컴포넌트에서 항상 타입을 지정해줄 땐 이 두 개를 넘겨야 한다.</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token operator\\\">&lt;</span>Props<span class=\\\"token punctuation\\\">,</span> State<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n   props<span class=\\\"token punctuation\\\">:</span> Props<span class=\\\"token punctuation\\\">;</span>\\n   state<span class=\\\"token punctuation\\\">:</span> State<span class=\\\"token punctuation\\\">;</span>\\n\\n   <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">:</span> Props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// namespace는 단순히 props가 어디 속한 애인지 알려주는 역할</span>\\n<span class=\\\"token keyword\\\">export</span> namespace Comp <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token comment\\\">// interface는 원래 아래 class 내에서 정의되었던 {prop1: prop1Type}들을 따로 모아둔 곳. 이제는 AProps란 이름으로 아래 {prop: prop1Type}의 모음에 접근할 수 있다.</span>\\n   <span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">AProps</span> <span class=\\\"token punctuation\\\">{</span>\\n       prop1<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n       prop2<span class=\\\"token punctuation\\\">:</span> number<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token comment\\\">// export interface AState {</span>\\n   <span class=\\\"token comment\\\">//    attr: string;</span>\\n   <span class=\\\"token comment\\\">//    show: boolean;</span>\\n   <span class=\\\"token comment\\\">// }</span>\\n   <span class=\\\"token comment\\\">// 와 같이 선언하고 아래에서 Comp.AState로 받아올 수도 있다.</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ntype AState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n   attr<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n   show<span class=\\\"token punctuation\\\">:</span> boolean<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">A</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token operator\\\">&lt;</span>Comp<span class=\\\"token punctuation\\\">.</span>AProps<span class=\\\"token punctuation\\\">,</span> AState<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">:</span> Comp<span class=\\\"token punctuation\\\">.</span>AProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n       <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n       <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n           attr<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>props<span class=\\\"token punctuation\\\">.</span>prop1<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>props<span class=\\\"token punctuation\\\">.</span>prop2<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">,</span>\\n           show<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n           <span class=\\\"token comment\\\">// show: 1</span>\\n       <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">A</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> prop1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'prop1'</span><span class=\\\"token punctuation\\\">,</span> prop2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">123</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// const b = new A({ wrong: 'prop1', prop2: \\\"123\\\" });</span>\\n<span class=\\\"token comment\\\">// const b = new A({ prop1: 1, prop2: \\\"123\\\" });</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>The interface LabelledValue is a name we can now use to describe the requirement in the previous example (<a href=\\\"https://www.typescriptlang.org/docs/handbook/interfaces.html\\\">https://www.typescriptlang.org/docs/handbook/interfaces.html</a>)\\ninterface Props {} 와 type Props = Array<string> 의 차이\\ninterface 는 object 이기 때문에 여러개의 key-value pair 로 확장이 가능</p>\\n</li>\\n</ol>\\n<hr>\\n<h2>9. void</h2>\\n<ol>\\n<li>\\n<p>typescript 에서 리턴값이 없는 함수를 정의할 때\\n<a href=\\\"https://www.typescriptlang.org/docs/handbook/basic-types.html\\\">https://www.typescriptlang.org/docs/handbook/basic-types.html</a></p>\\n</li>\\n<li>\\n<p><a href=\\\"https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html\\\">https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html</a> - Don’t use the return type any for callbacks whose value will be ignored:</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">/* WRONG */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> any<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">x</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Use the return type void for callbacks whose value will be ignored:</span>\\n<span class=\\\"token comment\\\">/* OK */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">x</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Why: Using void is safer because it prevents you from accidently using the return value of x in an unchecked way:</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">x</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// oops! meant to do something else</span>\\n  k<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// error, but would be OK if the return type had been 'any'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 정의할 때</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">warnUser</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"This is my warning message\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// prop으로 받을 때</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Props</span> <span class=\\\"token punctuation\\\">{</span>\\n  onSubmit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">:</span> string<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Typescript Basic\",\"date\":\"2018-09-19\",\"path\":\"/typescript-basic\",\"tags\":[\"typescript\"],\"excerpt\":\"\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/typescript-basic.json\n// module id = 389\n// module chunks = 10746375541928"],"sourceRoot":""}