webpackJsonp([0xda964323fc77],{371:function(n,s){n.exports={data:{markdownRemark:{html:'<p><a href="https://g.co/kgs/AkNCEg">자바스크립트 코딩 기법과 핵심 패턴(2011)</a> 책을 읽고 정리한 글입니다.</p>\n<p>👉 <a href="/literals-and-constructors">3장 - Literals and Constructors</a></p>\n<hr>\n<h2>1. 콜백이란?</h2>\n<p>함수는 일급 객체다. 프로퍼티를 가질 수 있고, 변수에 할당할 수도 있고, 다른 함수에 인자로 전달할 수도 있다. 인자가 되는 함수를 <strong>콜백함수</strong>, 또는 <strong>콜백</strong> 이라고 부른다.</p>\n<blockquote>\n<p>명시적으로 호출하는 함수가 아니라 함수를 일단 등록하고, 특정 이벤트가 발생하거나 특정 시점에 도달했을 때 호출되는 함수이다. 또는 특정 함수의 인자로 넘겨서 코드 내부에서 호출되는 함수도 콜백함수라고 한다. 대표적인 콜백 함수가 자바스크립트에서 event handler이다. - 인사이드 자바스크립트(2016)</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">writeCode</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">introduceBugs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">writeCode</span><span class="token punctuation">(</span>introduceBugs<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<ul>\n<li>함수의 <code>()</code>를 붙이면 즉시 실행, 붙이지 않으면 참조만 하고, 바깥 함수에서 알맞은 때에 실행해준다.</li>\n</ul>\n<hr>\n<h2>2. 콜백 예제</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 콜백 없이 사용</span>\n<span class="token comment">// array인 nodes를 인자로 받는 함수에서 nodes를 리턴하는 함수를 불러온다.</span>\n<span class="token keyword">let</span> <span class="token function-variable function">findNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">,</span>\n            nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            found\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 노드를 수정하는 로직 - 따로 둔다.</span>\n        nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> nodes    <span class="token comment">// nodes 리턴</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">hide</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// nodes를 인자로 받음</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    max <span class="token operator">=</span> nodes<span class="token punctuation">.</span>length\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'none\'</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 함수 실행</span>\n<span class="token function">hide</span><span class="token punctuation">(</span><span class="token function">findNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">//  콜백으로 리팩토링</span>\n<span class="token keyword">let</span> <span class="token function-variable function">findNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">,</span>\n    nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    found\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        callback <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        i <span class="token operator">-=</span> <span class="token number">1</span>\n        <span class="token comment">// 노드 수정 로직</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> nodes\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 콜백 함수</span>\n<span class="token keyword">let</span> <span class="token function-variable function">hide</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'none\'</span>\n<span class="token punctuation">}</span>\n<span class="token function">findNodes</span><span class="token punctuation">(</span>hide<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// hide()를 정의하지 않고 이렇게 익명함수로 표현할 수도 있다.</span>\n<span class="token function">findNodes</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'none\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<hr>\n<h2>3. 콜백과 유효범위</h2>\n<p>만약 콜백함수가 객체의 메서드인 경우, 콜백이 속한 객체를 바라보는 this를 사용하고 있을 때 문제가 된다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myapp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nmyapp<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">\'green\'</span>\nmyapp<span class="token punctuation">.</span><span class="token function-variable function">paint</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color\n<span class="token punctuation">}</span>\n\n<span class="token function">findNodes</span><span class="token punctuation">(</span>myapp<span class="token punctuation">.</span>paint<span class="token punctuation">)</span>  <span class="token comment">// 객체의 메서드를 콜백함수로 가진다. myapp.paint 내 this는 findNodes에서 바라보는 객체를 가리킬 것이다.</span>\n</code></pre>\n      </div>\n<ol>\n<li>이럴 경우, 아래처럼 콜백이 속해있는 객체도 인자로 받을 수 있도록 findNodes()를 수정해준다.</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">findNodes</span><span class="token punctuation">(</span>myapp<span class="token punctuation">.</span>paint<span class="token punctuation">,</span> myapp<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">findNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cbMethod<span class="token punctuation">,</span> cbObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> cbMethod <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cbMethod<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>cbObject<span class="token punctuation">,</span> found<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ol start="2">\n<li>메서드를 문자열로 전달할 수도 있다.</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">findNodes</span><span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> myapp<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">findNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>cbMethod<span class="token punctuation">,</span> cbObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> cbMethod <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cbMethod <span class="token operator">=</span> cbObject<span class="token punctuation">[</span>cbMethod<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> cbMethod <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cbMethod<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>cbObject<span class="token punctuation">,</span> found<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<hr>\n<h2>4. 비동기 이벤트 리스너</h2>\n<p>페이지 element에 이벤트 리스너를 붙이는 것은 사실, 이벤트가 발생했을 때, 호출될 콜백함수의 포인터를 전달하는 것이다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>대부분의 클라이언트 브라우저 프로그래밍은 event-driven 방식이다. 자바스크립트가 event-driven 프로그래밍에 적합한 이유는 프로그램이 비동기적으로 동작할 수 있게 하는 콜백 패턴 덕분이다.</p>\n<hr>\n<h2>5. 타임아웃</h2>\n<p><code>setTimeout</code>과 <code>setInterval</code>도 대표적인 콜백 패턴이다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">thePlotThickens</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'500ms later...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>thePlotThickens<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>여기서 <code>thePlotThickens</code>가 ()없이 전달되었다. 즉시 실행하지 않고 500ms가 지난 후에 호출할 수 있도록 함수를 가리키고만 있는 것이다. 여기서 <code>"thePlotThickens()"</code>와 같이 문자열을 전달하는 건 eval()과 같은 안티패턴이다.</p>\n<hr>\n<h2>6. 라이브러리에서의 콜백</h2>\n<p>콜백패턴은 라이브러리를 설계할 때 매우 유용하고 강력하다. 라이브러리에 들어갈 코드는 최대한 범용적이고 재사용 가능해야 하기 때문에 연결고리만을 제공하는 콜백 패턴은 OCP 원칙에 입각한 프로그래밍을 할 수 있다.</p>',frontmatter:{title:"Callback Pattern",date:"2017-11-15",path:"/callback",tags:["Javascript"],excerpt:"Javascript Patterns(2011)"}}},pathContext:{}}}});
//# sourceMappingURL=path---callback-72a59a23ad53fd0b4c6c.js.map