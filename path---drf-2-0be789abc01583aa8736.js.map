{"version":3,"sources":["webpack:///path---drf-2-0be789abc01583aa8736.js","webpack:///./.cache/json/drf-2.json"],"names":["webpackJsonp","380","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+hxBAAooyBC,aAA2VC,MAAA,4BAAAC,KAAA,aAAAC,KAAA,QAAAC,MAAA,kCAAAC,QAAA,oEAA8LC","file":"path---drf-2-0be789abc01583aa8736.js","sourcesContent":["webpackJsonp([39732828839030],{\n\n/***/ 380:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Django REST framework는 다양한 앱에서 DB에 접근할 수 있는 API endpoint를 만들어주는 프레임워크입니다. <a href=\\\"http://www.django-rest-framework.org/tutorial/1-serialization/\\\">Django REST framework Tutorial</a>을 따라하며 공부한 내용을 정리했습니다.</p>\\n<p>👉 <a href=\\\"/blog/drf1\\\">Django REST framework (1) - Serialization, Requests &#x26; Responses, Class-based views</a></p>\\n<hr>\\n<h2>1. Authentication &#x26; Permissions</h2>\\n<ol>\\n<li>Adding information to our model</li>\\n</ol>\\n<p>대부분의 API는 authenticated 된 유저만이 글을 작성하고, 본인이 작성한 글만 수정/삭제할 수 있도록 해야한다. 일단 Model에 User 클래스를 추가한다. 튜토리얼에서는 pygments라는 코드 하이라이팅 라이브러리도 사용하기 때문에 라이브러리도 불러와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># models.py</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">from</span> pygments<span class=\\\"token punctuation\\\">.</span>lexers <span class=\\\"token keyword\\\">import</span> get_lexer_by_name\\n<span class=\\\"token keyword\\\">from</span> pygments<span class=\\\"token punctuation\\\">.</span>formatters<span class=\\\"token punctuation\\\">.</span>html <span class=\\\"token keyword\\\">import</span> HtmlFormatter\\n<span class=\\\"token keyword\\\">from</span> pygments <span class=\\\"token keyword\\\">import</span> highlight\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Snippet</span><span class=\\\"token punctuation\\\">(</span>models<span class=\\\"token punctuation\\\">.</span>Model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    owner <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>ForeignKey<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'auth.User'</span><span class=\\\"token punctuation\\\">,</span> related_name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'snippets'</span><span class=\\\"token punctuation\\\">,</span> on_delete<span class=\\\"token operator\\\">=</span>models<span class=\\\"token punctuation\\\">.</span>CASCADE<span class=\\\"token punctuation\\\">)</span>\\n    highlighted <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>TextField<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>그리고 이를 저장할 <code>.save()</code> 메소드를 추가한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    lexer <span class=\\\"token operator\\\">=</span> get_lexer_by_name<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>language<span class=\\\"token punctuation\\\">)</span>\\n    linenos <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>linenos <span class=\\\"token operator\\\">and</span> <span class=\\\"token string\\\">'table'</span> <span class=\\\"token operator\\\">or</span> <span class=\\\"token boolean\\\">False</span>\\n    options <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">and</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">:</span>self<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">or</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    formatter <span class=\\\"token operator\\\">=</span> HtmlFormatter<span class=\\\"token punctuation\\\">(</span>style<span class=\\\"token operator\\\">=</span>self<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">,</span> linenos <span class=\\\"token operator\\\">=</span> linenos<span class=\\\"token punctuation\\\">,</span> full<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>options<span class=\\\"token punctuation\\\">)</span>\\n    self<span class=\\\"token punctuation\\\">.</span>highlighted <span class=\\\"token operator\\\">=</span> highlight<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>code<span class=\\\"token punctuation\\\">,</span> lexer<span class=\\\"token punctuation\\\">,</span> formatter<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token builtin\\\">super</span><span class=\\\"token punctuation\\\">(</span>Snippet<span class=\\\"token punctuation\\\">,</span> self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>save<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\"># super - 상속 꼬였을때 사용하는. 초기화 함수.</span>\\n</code></pre>\\n      </div>\\n<p>글을 작성할 User를 <code>python manage.py createsuperuser</code> 명령을 통해 추가해 준다.</p>\\n<p>User에 대한 serializer도 serializers.py에 추가해준다. Snippet 모델에 owner가 ForeignKey로 걸려있긴 하지만 아래처럼 snippets를 명시해줘야 한다. (Because 'snippets' is a reverse relationship on the User model, it will not be included by default when using the ModelSerializer class, so we needed to add an explicit field for it.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># serializers.py</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>contrib<span class=\\\"token punctuation\\\">.</span>auth<span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> User\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserSerializer</span><span class=\\\"token punctuation\\\">(</span>serializers<span class=\\\"token punctuation\\\">.</span>ModelSerializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    snippets <span class=\\\"token operator\\\">=</span> serializers<span class=\\\"token punctuation\\\">.</span>PrimaryKeyRelatedField<span class=\\\"token punctuation\\\">(</span>many<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">,</span> queryset<span class=\\\"token operator\\\">=</span>Snippet<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    owner <span class=\\\"token operator\\\">=</span> serializers<span class=\\\"token punctuation\\\">.</span>ReadOnlyField<span class=\\\"token punctuation\\\">(</span>source<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'owner.username'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Meta</span><span class=\\\"token punctuation\\\">:</span>\\n        model <span class=\\\"token operator\\\">=</span> User\\n        fields <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'username'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'snippets'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'owner'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>Adding endpoints for our User models</li>\\n</ol>\\n<p><code>/users</code> endpoint로 접근할 수 있도록 view와 url도 아래처럼 정의한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">from</span> snippets<span class=\\\"token punctuation\\\">.</span>serializers <span class=\\\"token keyword\\\">import</span> UserSerializer\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserList</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>ListAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    queryset <span class=\\\"token operator\\\">=</span> User<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    serializer_class <span class=\\\"token operator\\\">=</span> UserSerializer   <span class=\\\"token comment\\\"># 깃헙 소스코드에 class UserSerializer 주석처리 되어 있음...?</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserDetail</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>RetrieveAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    queryset <span class=\\\"token operator\\\">=</span> User<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\"># detail인데, 왜 다불러오지?</span>\\n    serializer_class <span class=\\\"token operator\\\">=</span> UserSerializer\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># urls.py</span>\\nurlpatterns <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^users/$'</span><span class=\\\"token punctuation\\\">,</span> views<span class=\\\"token punctuation\\\">.</span>UserList<span class=\\\"token punctuation\\\">.</span>as_view<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^users/(?P&lt;pk>[0-9]+)/$'</span><span class=\\\"token punctuation\\\">,</span> views<span class=\\\"token punctuation\\\">.</span>UserDetail<span class=\\\"token punctuation\\\">.</span>as_view<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>** <a href=\\\"https://docs.djangoproject.com/ko/1.11/ref/class-based-views/base/#django.views.generic.base.View.as_view\\\"><code>.as_view()</code> 메소드</a> - Returns a callable view that takes a request and returns a response</p>\\n<ol start=\\\"3\\\">\\n<li>Associating Snippets with Users</li>\\n</ol>\\n<p>그런데 snippet 인스턴스가 생성될 때 serialize 되는 정보에 user는 아직 들어가지 않는다. 그래서 <code>SnippetList</code> 클래스에 create 메소드를 <code>perform_create()</code>로 오버라이딩해주고 그 안에 유저 정보를 담는다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">perform_create</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> serializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    serializer<span class=\\\"token punctuation\\\">.</span>save<span class=\\\"token punctuation\\\">(</span>owner<span class=\\\"token operator\\\">=</span>self<span class=\\\"token punctuation\\\">.</span>request<span class=\\\"token punctuation\\\">.</span>user<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 하면 serializer의 원래 <code>create()</code>에 owner라는 추가 정보가 들어갈 것이다.</p>\\n<p>** 근데 models.py에 owner 정의하고 serializer는 modelserializer 상속받는데 왜 정보가 안들어가지?</p>\\n<ol start=\\\"4\\\">\\n<li>Updating our serializer</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># serializer.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserSerializer</span><span class=\\\"token punctuation\\\">(</span>serializers<span class=\\\"token punctuation\\\">.</span>ModelSerializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    owner <span class=\\\"token operator\\\">=</span> serializers<span class=\\\"token punctuation\\\">.</span>ReadOnlyField<span class=\\\"token punctuation\\\">(</span>source<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'owner.username'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>source는 어떤 attribute를 기준으로 유저를 구분할 것인지 판단한다. 여기서는 owner의 username으로 구분한다. <code>ReadOnlyField</code>는 <code>CharField(read_only=True)</code>와 같은 필드로, 조회만 가능하다.</p>\\n<ol start=\\\"5\\\">\\n<li>Adding required permissions to views</li>\\n</ol>\\n<p>REST framework에서 제공하는 다양한 permission class 중에 <code>IsAuthenticatedOrReadOnly</code>를 SnippetList, SnippetDetail 클래스에 추가해준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> permissions\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetList</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>ListAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetDetail</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>RetrieveAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>이 프로퍼티를 추가할 때, tuple을 만들어주기 위해 꼭 <code>,</code>를 추가해야한다. 이게 없으면 <code>TypeError: 'type' object is not iterable</code> 오류가 나게 된다.</p>\\n<ol start=\\\"6\\\">\\n<li>Adding login to the Browsable API</li>\\n</ol>\\n<p><code>localhost:8000/snippets/</code>에 접근하면 이제 snippets를 추가할 수 없게 된다. 브라우저에서 로그인이 가능하도록 urls.py를 수정해야 한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># urls.py</span>\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>conf<span class=\\\"token punctuation\\\">.</span>urls <span class=\\\"token keyword\\\">import</span> include\\n\\nurlpatterns <span class=\\\"token operator\\\">+=</span> <span class=\\\"token punctuation\\\">[</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^api-auth/'</span><span class=\\\"token punctuation\\\">,</span> include<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'rest_framework.urls'</span><span class=\\\"token punctuation\\\">,</span> namespace<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'rest_framework'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>이걸 추가하고 다시 <code>localhost:8000/snippets/</code>에서 브라우저를 새로고침하면 우측 상단에 <code>Login</code> 버튼이 생긴다.</p>\\n<ol start=\\\"7\\\">\\n<li>Object level permissions</li>\\n</ol>\\n<p>이제 snippet을 생성한 본인만이 이를 수정/삭제할 수 있도록 permission을 추가해줘야 한다. snippets 앱에 permissions.py를 추가한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># permissions.py</span>\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> permissions\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IsOwnerOrReadOnly</span><span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>BasePermission<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_object_permission</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> view<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">if</span> request<span class=\\\"token punctuation\\\">.</span>method <span class=\\\"token keyword\\\">in</span> permissions<span class=\\\"token punctuation\\\">.</span>SAFE_METHODS<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">True</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">.</span>owner <span class=\\\"token operator\\\">==</span> request<span class=\\\"token punctuation\\\">.</span>user\\n</code></pre>\\n      </div>\\n<p>BasePermission이 어떻게 생겼는지 궁금해서 <a href=\\\"https://github.com/encode/django-rest-framework/blob/master/rest_framework/permissions.py\\\">소스코드</a>를 봤더니 <code>return True</code>밖에 없다... 넘나 클린한 이 코드는 도대체 뭐징 ㅇㅅaㅇ</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># django-rest-framework/rest_framework/permissions.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BasePermission</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_permission</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> view<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">True</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_object_permission</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> view<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">True</span>\\n</code></pre>\\n      </div>\\n<p>어쨌든 permissions.py에 이렇게 추가해준 IsOwnerOrReadOnly를 views.py에 임포트하고 SnippetList, SnippetDetail 클래스의 permissions_classes에 추가해준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">from</span> snippets<span class=\\\"token punctuation\\\">.</span>permissions <span class=\\\"token keyword\\\">import</span> IsOwnerOrReadOnly\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetList</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>ListAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span> IsOwnerOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetDetail</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>RetrieveAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span> IsOwnerOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>이제 콘솔창에서도 id와 패스워드를 입력하면 http POST 요청을 보낼 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">http -a admin:password POST http://127.0.0.1:8000/snippets/ code=\\\"test\\\"\\n\\n{\\n    \\\"id\\\": 1,\\n    \\\"owner\\\": \\\"admin\\\",\\n    \\\"title\\\": \\\"foo\\\",\\n    \\\"code\\\": \\\"test\\\",\\n    \\\"linenos\\\": false,\\n    \\\"language\\\": \\\"python\\\",\\n    \\\"style\\\": \\\"friendly\\\"\\n}</code></pre>\\n      </div>\\n<hr>\\n<h2>2. Relationships &#x26; Hyperlinked APIs</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> rest_framework<span class=\\\"token punctuation\\\">.</span>decorators <span class=\\\"token keyword\\\">import</span> api_view\\n<span class=\\\"token keyword\\\">from</span> rest_framework<span class=\\\"token punctuation\\\">.</span>reverse <span class=\\\"token keyword\\\">import</span> reverse\\n\\n@api_view<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">api_root</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">format</span><span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">return</span> Response<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'users'</span><span class=\\\"token punctuation\\\">:</span> reverse<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'user-list'</span><span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token operator\\\">=</span>request<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">format</span><span class=\\\"token operator\\\">=</span><span class=\\\"token builtin\\\">format</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'snippets'</span><span class=\\\"token punctuation\\\">:</span> reverse<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'snippet-list'</span><span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token operator\\\">=</span>request<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">format</span><span class=\\\"token operator\\\">=</span><span class=\\\"token builtin\\\">format</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><code>format=None</code>을 지정해줌으로서 특정 포맷을 명시한 url로도 접근이 가능하도록 만들어준다.(<a href=\\\"http://www.django-rest-framework.org/tutorial/2-requests-and-responses/#adding-optional-format-suffixes-to-our-urls\\\">참고</a>)</li>\\n</ul>\\n<p>To be continued!</p>\",\"frontmatter\":{\"title\":\"Django REST framework (2)\",\"date\":\"2017-09-04\",\"path\":\"/drf2\",\"tags\":[\"REST\",\"Django\",\"authentication\"],\"excerpt\":\"Authentication & Permissions, Relationships & Hyperlinked APIs\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---drf-2-0be789abc01583aa8736.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Django REST framework는 다양한 앱에서 DB에 접근할 수 있는 API endpoint를 만들어주는 프레임워크입니다. <a href=\\\"http://www.django-rest-framework.org/tutorial/1-serialization/\\\">Django REST framework Tutorial</a>을 따라하며 공부한 내용을 정리했습니다.</p>\\n<p>👉 <a href=\\\"/blog/drf1\\\">Django REST framework (1) - Serialization, Requests &#x26; Responses, Class-based views</a></p>\\n<hr>\\n<h2>1. Authentication &#x26; Permissions</h2>\\n<ol>\\n<li>Adding information to our model</li>\\n</ol>\\n<p>대부분의 API는 authenticated 된 유저만이 글을 작성하고, 본인이 작성한 글만 수정/삭제할 수 있도록 해야한다. 일단 Model에 User 클래스를 추가한다. 튜토리얼에서는 pygments라는 코드 하이라이팅 라이브러리도 사용하기 때문에 라이브러리도 불러와준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># models.py</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">from</span> pygments<span class=\\\"token punctuation\\\">.</span>lexers <span class=\\\"token keyword\\\">import</span> get_lexer_by_name\\n<span class=\\\"token keyword\\\">from</span> pygments<span class=\\\"token punctuation\\\">.</span>formatters<span class=\\\"token punctuation\\\">.</span>html <span class=\\\"token keyword\\\">import</span> HtmlFormatter\\n<span class=\\\"token keyword\\\">from</span> pygments <span class=\\\"token keyword\\\">import</span> highlight\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Snippet</span><span class=\\\"token punctuation\\\">(</span>models<span class=\\\"token punctuation\\\">.</span>Model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    owner <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>ForeignKey<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'auth.User'</span><span class=\\\"token punctuation\\\">,</span> related_name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'snippets'</span><span class=\\\"token punctuation\\\">,</span> on_delete<span class=\\\"token operator\\\">=</span>models<span class=\\\"token punctuation\\\">.</span>CASCADE<span class=\\\"token punctuation\\\">)</span>\\n    highlighted <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>TextField<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>그리고 이를 저장할 <code>.save()</code> 메소드를 추가한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    lexer <span class=\\\"token operator\\\">=</span> get_lexer_by_name<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>language<span class=\\\"token punctuation\\\">)</span>\\n    linenos <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>linenos <span class=\\\"token operator\\\">and</span> <span class=\\\"token string\\\">'table'</span> <span class=\\\"token operator\\\">or</span> <span class=\\\"token boolean\\\">False</span>\\n    options <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">and</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">:</span>self<span class=\\\"token punctuation\\\">.</span>title<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">or</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    formatter <span class=\\\"token operator\\\">=</span> HtmlFormatter<span class=\\\"token punctuation\\\">(</span>style<span class=\\\"token operator\\\">=</span>self<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">,</span> linenos <span class=\\\"token operator\\\">=</span> linenos<span class=\\\"token punctuation\\\">,</span> full<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>options<span class=\\\"token punctuation\\\">)</span>\\n    self<span class=\\\"token punctuation\\\">.</span>highlighted <span class=\\\"token operator\\\">=</span> highlight<span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>code<span class=\\\"token punctuation\\\">,</span> lexer<span class=\\\"token punctuation\\\">,</span> formatter<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token builtin\\\">super</span><span class=\\\"token punctuation\\\">(</span>Snippet<span class=\\\"token punctuation\\\">,</span> self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>save<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>args<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kwargs<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\"># super - 상속 꼬였을때 사용하는. 초기화 함수.</span>\\n</code></pre>\\n      </div>\\n<p>글을 작성할 User를 <code>python manage.py createsuperuser</code> 명령을 통해 추가해 준다.</p>\\n<p>User에 대한 serializer도 serializers.py에 추가해준다. Snippet 모델에 owner가 ForeignKey로 걸려있긴 하지만 아래처럼 snippets를 명시해줘야 한다. (Because 'snippets' is a reverse relationship on the User model, it will not be included by default when using the ModelSerializer class, so we needed to add an explicit field for it.)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># serializers.py</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>contrib<span class=\\\"token punctuation\\\">.</span>auth<span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> User\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserSerializer</span><span class=\\\"token punctuation\\\">(</span>serializers<span class=\\\"token punctuation\\\">.</span>ModelSerializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    snippets <span class=\\\"token operator\\\">=</span> serializers<span class=\\\"token punctuation\\\">.</span>PrimaryKeyRelatedField<span class=\\\"token punctuation\\\">(</span>many<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">True</span><span class=\\\"token punctuation\\\">,</span> queryset<span class=\\\"token operator\\\">=</span>Snippet<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    owner <span class=\\\"token operator\\\">=</span> serializers<span class=\\\"token punctuation\\\">.</span>ReadOnlyField<span class=\\\"token punctuation\\\">(</span>source<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'owner.username'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Meta</span><span class=\\\"token punctuation\\\">:</span>\\n        model <span class=\\\"token operator\\\">=</span> User\\n        fields <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'username'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'snippets'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'owner'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>Adding endpoints for our User models</li>\\n</ol>\\n<p><code>/users</code> endpoint로 접근할 수 있도록 view와 url도 아래처럼 정의한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">from</span> snippets<span class=\\\"token punctuation\\\">.</span>serializers <span class=\\\"token keyword\\\">import</span> UserSerializer\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserList</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>ListAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    queryset <span class=\\\"token operator\\\">=</span> User<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    serializer_class <span class=\\\"token operator\\\">=</span> UserSerializer   <span class=\\\"token comment\\\"># 깃헙 소스코드에 class UserSerializer 주석처리 되어 있음...?</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserDetail</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>RetrieveAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    queryset <span class=\\\"token operator\\\">=</span> User<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\"># detail인데, 왜 다불러오지?</span>\\n    serializer_class <span class=\\\"token operator\\\">=</span> UserSerializer\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># urls.py</span>\\nurlpatterns <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^users/$'</span><span class=\\\"token punctuation\\\">,</span> views<span class=\\\"token punctuation\\\">.</span>UserList<span class=\\\"token punctuation\\\">.</span>as_view<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^users/(?P&lt;pk>[0-9]+)/$'</span><span class=\\\"token punctuation\\\">,</span> views<span class=\\\"token punctuation\\\">.</span>UserDetail<span class=\\\"token punctuation\\\">.</span>as_view<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>** <a href=\\\"https://docs.djangoproject.com/ko/1.11/ref/class-based-views/base/#django.views.generic.base.View.as_view\\\"><code>.as_view()</code> 메소드</a> - Returns a callable view that takes a request and returns a response</p>\\n<ol start=\\\"3\\\">\\n<li>Associating Snippets with Users</li>\\n</ol>\\n<p>그런데 snippet 인스턴스가 생성될 때 serialize 되는 정보에 user는 아직 들어가지 않는다. 그래서 <code>SnippetList</code> 클래스에 create 메소드를 <code>perform_create()</code>로 오버라이딩해주고 그 안에 유저 정보를 담는다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">perform_create</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> serializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    serializer<span class=\\\"token punctuation\\\">.</span>save<span class=\\\"token punctuation\\\">(</span>owner<span class=\\\"token operator\\\">=</span>self<span class=\\\"token punctuation\\\">.</span>request<span class=\\\"token punctuation\\\">.</span>user<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>이렇게 하면 serializer의 원래 <code>create()</code>에 owner라는 추가 정보가 들어갈 것이다.</p>\\n<p>** 근데 models.py에 owner 정의하고 serializer는 modelserializer 상속받는데 왜 정보가 안들어가지?</p>\\n<ol start=\\\"4\\\">\\n<li>Updating our serializer</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># serializer.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserSerializer</span><span class=\\\"token punctuation\\\">(</span>serializers<span class=\\\"token punctuation\\\">.</span>ModelSerializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    owner <span class=\\\"token operator\\\">=</span> serializers<span class=\\\"token punctuation\\\">.</span>ReadOnlyField<span class=\\\"token punctuation\\\">(</span>source<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'owner.username'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>source는 어떤 attribute를 기준으로 유저를 구분할 것인지 판단한다. 여기서는 owner의 username으로 구분한다. <code>ReadOnlyField</code>는 <code>CharField(read_only=True)</code>와 같은 필드로, 조회만 가능하다.</p>\\n<ol start=\\\"5\\\">\\n<li>Adding required permissions to views</li>\\n</ol>\\n<p>REST framework에서 제공하는 다양한 permission class 중에 <code>IsAuthenticatedOrReadOnly</code>를 SnippetList, SnippetDetail 클래스에 추가해준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> permissions\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetList</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>ListAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetDetail</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>RetrieveAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>이 프로퍼티를 추가할 때, tuple을 만들어주기 위해 꼭 <code>,</code>를 추가해야한다. 이게 없으면 <code>TypeError: 'type' object is not iterable</code> 오류가 나게 된다.</p>\\n<ol start=\\\"6\\\">\\n<li>Adding login to the Browsable API</li>\\n</ol>\\n<p><code>localhost:8000/snippets/</code>에 접근하면 이제 snippets를 추가할 수 없게 된다. 브라우저에서 로그인이 가능하도록 urls.py를 수정해야 한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># urls.py</span>\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>conf<span class=\\\"token punctuation\\\">.</span>urls <span class=\\\"token keyword\\\">import</span> include\\n\\nurlpatterns <span class=\\\"token operator\\\">+=</span> <span class=\\\"token punctuation\\\">[</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^api-auth/'</span><span class=\\\"token punctuation\\\">,</span> include<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'rest_framework.urls'</span><span class=\\\"token punctuation\\\">,</span> namespace<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'rest_framework'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>이걸 추가하고 다시 <code>localhost:8000/snippets/</code>에서 브라우저를 새로고침하면 우측 상단에 <code>Login</code> 버튼이 생긴다.</p>\\n<ol start=\\\"7\\\">\\n<li>Object level permissions</li>\\n</ol>\\n<p>이제 snippet을 생성한 본인만이 이를 수정/삭제할 수 있도록 permission을 추가해줘야 한다. snippets 앱에 permissions.py를 추가한다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># permissions.py</span>\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> permissions\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IsOwnerOrReadOnly</span><span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>BasePermission<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_object_permission</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> view<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">if</span> request<span class=\\\"token punctuation\\\">.</span>method <span class=\\\"token keyword\\\">in</span> permissions<span class=\\\"token punctuation\\\">.</span>SAFE_METHODS<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">True</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">.</span>owner <span class=\\\"token operator\\\">==</span> request<span class=\\\"token punctuation\\\">.</span>user\\n</code></pre>\\n      </div>\\n<p>BasePermission이 어떻게 생겼는지 궁금해서 <a href=\\\"https://github.com/encode/django-rest-framework/blob/master/rest_framework/permissions.py\\\">소스코드</a>를 봤더니 <code>return True</code>밖에 없다... 넘나 클린한 이 코드는 도대체 뭐징 ㅇㅅaㅇ</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># django-rest-framework/rest_framework/permissions.py</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BasePermission</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_permission</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> view<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">True</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">has_object_permission</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token punctuation\\\">,</span> view<span class=\\\"token punctuation\\\">,</span> obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">True</span>\\n</code></pre>\\n      </div>\\n<p>어쨌든 permissions.py에 이렇게 추가해준 IsOwnerOrReadOnly를 views.py에 임포트하고 SnippetList, SnippetDetail 클래스의 permissions_classes에 추가해준다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># views.py</span>\\n<span class=\\\"token keyword\\\">from</span> snippets<span class=\\\"token punctuation\\\">.</span>permissions <span class=\\\"token keyword\\\">import</span> IsOwnerOrReadOnly\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetList</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>ListAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span> IsOwnerOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SnippetDetail</span><span class=\\\"token punctuation\\\">(</span>generics<span class=\\\"token punctuation\\\">.</span>RetrieveAPIView<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    permission_classes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>permissions<span class=\\\"token punctuation\\\">.</span>IsAuthenticatedOrReadOnly<span class=\\\"token punctuation\\\">,</span> IsOwnerOrReadOnly<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>이제 콘솔창에서도 id와 패스워드를 입력하면 http POST 요청을 보낼 수 있다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">http -a admin:password POST http://127.0.0.1:8000/snippets/ code=\\\"test\\\"\\n\\n{\\n    \\\"id\\\": 1,\\n    \\\"owner\\\": \\\"admin\\\",\\n    \\\"title\\\": \\\"foo\\\",\\n    \\\"code\\\": \\\"test\\\",\\n    \\\"linenos\\\": false,\\n    \\\"language\\\": \\\"python\\\",\\n    \\\"style\\\": \\\"friendly\\\"\\n}</code></pre>\\n      </div>\\n<hr>\\n<h2>2. Relationships &#x26; Hyperlinked APIs</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> rest_framework<span class=\\\"token punctuation\\\">.</span>decorators <span class=\\\"token keyword\\\">import</span> api_view\\n<span class=\\\"token keyword\\\">from</span> rest_framework<span class=\\\"token punctuation\\\">.</span>reverse <span class=\\\"token keyword\\\">import</span> reverse\\n\\n@api_view<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'GET'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">api_root</span><span class=\\\"token punctuation\\\">(</span>request<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">format</span><span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">return</span> Response<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'users'</span><span class=\\\"token punctuation\\\">:</span> reverse<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'user-list'</span><span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token operator\\\">=</span>request<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">format</span><span class=\\\"token operator\\\">=</span><span class=\\\"token builtin\\\">format</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'snippets'</span><span class=\\\"token punctuation\\\">:</span> reverse<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'snippet-list'</span><span class=\\\"token punctuation\\\">,</span> request<span class=\\\"token operator\\\">=</span>request<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">format</span><span class=\\\"token operator\\\">=</span><span class=\\\"token builtin\\\">format</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><code>format=None</code>을 지정해줌으로서 특정 포맷을 명시한 url로도 접근이 가능하도록 만들어준다.(<a href=\\\"http://www.django-rest-framework.org/tutorial/2-requests-and-responses/#adding-optional-format-suffixes-to-our-urls\\\">참고</a>)</li>\\n</ul>\\n<p>To be continued!</p>\",\"frontmatter\":{\"title\":\"Django REST framework (2)\",\"date\":\"2017-09-04\",\"path\":\"/drf2\",\"tags\":[\"REST\",\"Django\",\"authentication\"],\"excerpt\":\"Authentication & Permissions, Relationships & Hyperlinked APIs\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/drf-2.json\n// module id = 380\n// module chunks = 39732828839030"],"sourceRoot":""}