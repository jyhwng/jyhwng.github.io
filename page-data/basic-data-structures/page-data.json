{"componentChunkName":"component---src-templates-blog-post-js","path":"/basic-data-structures","webpackCompilationHash":"ea80e17999b17bbf3421","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://interactivepython.org/courselib/static/pythonds/index.html\">Problem Solving with Algorithms and Data Structures using Python</a> 책을 읽으며 스터디한 내용을 정리하여 연재합니다.</p>\n<hr>\n<h2>1. <strong>Stack</strong></h2>\n<ol>\n<li>Last In, First Out: insertion and deletion of items takes place only at a single end called <em>top</em> of the stack</li>\n<li>Stacks are fundamentally important, as they can be used to reverse the order of items.</li>\n<li>e.g. browser history</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li><strong>Queue</strong></li>\n<li><strong>Deque</strong></li>\n</ol>\n<hr>\n<h2>4. List</h2>\n<h3>1. O(1) vs O(n)</h3>\n<ul>\n<li>리스트를 사용하여 Stack 클래스를 만들 경우, <code class=\"language-text\">pop()</code> 이나 <code class=\"language-text\">append()</code>는 <code class=\"language-text\">O(1)</code>이다. 자리에 상관 없이 맨 마지막에 들어가기 때문.</li>\n<li>그러나 <code class=\"language-text\">pop(0)</code>, <code class=\"language-text\">insert(0, x)</code> 는 <code class=\"language-text\">O(n)</code>이다. 앞에서부터 자리수가 다 바뀌기 때문.</li>\n<li>논리적으로 같더라도, <strong>벤치마크 테스팅</strong> 을 하면 속도가 달라진다. (even though the implementations are logically equivalent, they would have very different timings when performing benchmark testing)</li>\n</ul>\n<h3>2. Linked Lists</h3>\n<ol>\n<li>\n<p>Linked list 란? <a href=\"https://en.wikipedia.org/wiki/Linked_list\">(Wikipedia)</a></p>\n<ul>\n<li>\n<p>Linear 한 데이터의 모음. 인덱스(?)가 부여되어 있지 않음 (그만큼 메모리를 안먹음)</p>\n<blockquote>\n<p>파이썬의 리스트는 인덱스가 부여되어 있다! 그래서 중간에 insert 하는건 <code class=\"language-text\">O(n)</code></p>\n</blockquote>\n</li>\n<li>대신 pointer 라고 하는 애가 다음 데이터를 가리키고 있음</li>\n<li>물론 첫 데이터는 처음이라는 표시가 있고, 마지막 데이터는 포인터를 갖고 있지 않음</li>\n<li>각각의 데이터를 node 라고 부름. 이 node 가 모인 것이 sequence. 즉, 각각의 node 는 데이터와 레퍼런스를 갖고 있는 셈</li>\n</ul>\n</li>\n<li>\n<p>Linked list 를 구현하는 이유</p>\n<ul>\n<li>리스트 중간에 아이템을 넣거나 뺄 수 있다.</li>\n<li>스택과 큐를 만들 수 있다.</li>\n<li>처음에 사이즈를 지정할 필요가 없다.</li>\n</ul>\n</li>\n<li>\n<p>Linked list 의 단점</p>\n<ul>\n<li>pointer 때문에 array 보다 메모리를 더 먹는다.</li>\n<li>sequence 이기 때문에 한 아이템을 찾으려면 진입점부터 하나 하나 체크해야 한다.</li>\n</ul>\n</li>\n</ol>\n<h3>1-1. Unordered List</h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Pythonic way to define getter/setter/deleter - @property를 쓰세요!</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> initdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> initdata\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># Note in the constructor that a node is initially created with next set to None. Since this is sometimes referred to as “grounding the node,” we will use the standard ground symbol to denote a reference that is referring to None. It is always a good idea to explicitly assign None to your initial next reference values.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>data\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> newdata\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>newnext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> newnext\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PythonicNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> initdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> initdata\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>data\n\n    @x<span class=\"token punctuation\">.</span>setter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> newdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> newdata\n\n    @x<span class=\"token punctuation\">.</span>deleter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>data</code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">temp <span class=\"token operator\">=</span> PythonicNode<span class=\"token punctuation\">(</span><span class=\"token number\">93</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># getter</span>\ntemp<span class=\"token punctuation\">.</span>x <span class=\"token comment\"># 93</span>\n\n<span class=\"token comment\"># setter</span>\ntemp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1234</span>\ntemp<span class=\"token punctuation\">.</span>x <span class=\"token comment\"># 1234</span>\n\n<span class=\"token comment\"># deleter</span>\n<span class=\"token keyword\">del</span> temp<span class=\"token punctuation\">.</span>x</code></pre>\n      </div>\n<h3>1-2. The Unordered List Class</h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnorderedList</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token comment\"># 이 클래스는 첫 노드에 대한 레퍼런스를 반드시 가져야 한다. (... class must maintain a reference to the first node.)</span>\n    <span class=\"token comment\"># 그런데 이 생성자에 head가 none 인 이유는 막 생성된 리스트는 아무 노드도 없기 때문!</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span>\n    <span class=\"token comment\"># 이 리스트가 있는지 없는지 보려면 head가 있는지 없는지만 보면 됨. 그래서 boolean식으로 알아봄</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        temp <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># temp는 노드 클래스의 인스턴스여야 하고,</span>\n        temp<span class=\"token punctuation\">.</span>setNext<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 새로운 temp가 들어오면, 원래 있던 head(None)는 temp의 next가 되고,</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> temp    <span class=\"token comment\"># temp는 새로운 head가 된다! - modify the head of the list to refer to the new node</span>\n\n    <span class=\"token comment\"># 3,4번째 라인의 순서가 중요하다!</span>\n    <span class=\"token comment\"># x.next == None 이면, x 는 이 리스트의 첫 데이터</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> current <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># head 가 None이 나올때까지, 끝까지 돈다.</span>\n            count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>     <span class=\"token comment\"># while loop가 도는 횟수를 센다.</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> count\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">while</span> current <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> found<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> item<span class=\"token punctuation\">:</span>\n                found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> found\n\n    <span class=\"token comment\"># head부터 차근차근 찾아나간다. 일치하지 않으면 found가 False를, 일치하면 True를 뱉어냄.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> current <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 제거하고 싶은 노드의 앞,뒤 링크를 끊어주면 된다.</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        previous <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> found<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> item<span class=\"token punctuation\">:</span>\n                found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                previous <span class=\"token operator\">=</span> current\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> previous <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            previous<span class=\"token punctuation\">.</span>setNext<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 순서는 바꿨는데, node 인스턴스는 그대로 남아있잖아? (size는 그대로 아닌가?)</span>\n\n\n    <span class=\"token comment\"># 함께 풀어봅시다!!</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># item이 last가 되려면? 처음 들어온 아이템까지 가서 그 next에 item을 붙인다.</span>\n        temp <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n\n        <span class=\"token keyword\">while</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        current<span class=\"token punctuation\">.</span>setNext<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">mylist <span class=\"token operator\">=</span> UnorderedList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># None</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">mylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">93</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># &lt;__main__.Node object at 0x1045acf28></span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">mylist<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 6</span>\n\nmylist<span class=\"token punctuation\">.</span>print_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 54</span>\n<span class=\"token comment\"># 26</span>\n<span class=\"token comment\"># 93</span>\n<span class=\"token comment\"># 17</span>\n<span class=\"token comment\"># 77</span>\n<span class=\"token comment\"># 31</span>\n\nmylist<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span>\n\nmylist<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>print_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 54</span>\n<span class=\"token comment\"># 26</span>\n<span class=\"token comment\"># 93</span>\n<span class=\"token comment\"># 77</span>\n<span class=\"token comment\"># 31</span>\n\nmylist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">14923</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>print_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 54</span>\n<span class=\"token comment\"># 26</span>\n<span class=\"token comment\"># 93</span>\n<span class=\"token comment\"># 77</span>\n<span class=\"token comment\"># 31</span>\n<span class=\"token comment\"># 14923</span></code></pre>\n      </div>\n<h3>2-1. Ordered List</h3>\n<p>OrderedList()</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">- add(item)\n- remove(item)\n- search(item)\n- isEmpty()\n- size()\n- append(item)\n- index(item)\n- insert(pos,item)\n- pop()\n- pop(pos)</code></pre>\n      </div>\n<p>(append, insert 가 안됨)</p>\n<h3>2-2. The Ordered List Class</h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderedList</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 크기의 순서가 있기 때문에 끝까지 돌지 않아도 된다.</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">while</span> current <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> found <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> stop<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> item<span class=\"token punctuation\">:</span>\n                found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> item<span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 찾는 데이터보다 큰곳까지 왔는데도 없다면, 여긴 없다는 뜻. iteration을 stop 해도 된다.</span>\n                    stop <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> found\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># unordered랑 다르게, 아무데나 들어가선 안되고, 크기에 맞게 들어가야한다.</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        previous <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">while</span> current <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> stop<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> item<span class=\"token punctuation\">:</span>\n                stop <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                previous <span class=\"token operator\">=</span> current\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        temp <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 인스턴스 생성해주고,</span>\n        <span class=\"token keyword\">if</span> previous <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            temp<span class=\"token punctuation\">.</span>setNext<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> temp\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            temp<span class=\"token punctuation\">.</span>setNext<span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># item 보다 큰 current 는 item 뒤에 넣어주고</span>\n            previous<span class=\"token punctuation\">.</span>setNext<span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># item보다 작은 previous의 next 에 item을 넣어준다.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">print_all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> current <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>getData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>getNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">mylist <span class=\"token operator\">=</span> OrderedList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">93</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span>\nmylist<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">54</span><span class=\"token punctuation\">)</span>\n\nmylist<span class=\"token punctuation\">.</span>print_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 17</span>\n<span class=\"token comment\"># 26</span>\n<span class=\"token comment\"># 31</span>\n<span class=\"token comment\"># 54</span>\n<span class=\"token comment\"># 77</span>\n<span class=\"token comment\"># 93</span></code></pre>\n      </div>","frontmatter":{"title":"Basic Data Structures","date":"2017-08-03","path":"/basic-data-structures","tags":["Algorithm","python"],"excerpt":"Python Algorithm Study - Week 3, 4"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}