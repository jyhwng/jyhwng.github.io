{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-typescript-nextjs","webpackCompilationHash":"4b7da702d8e0718378ea","result":{"data":{"markdownRemark":{"html":"<h2>Next.js 란?</h2>\n<p><a href=\"https://nextjs.org/\">Next.js</a> 는 Webpack 등 설정없이 서버 사이드 렌더링, 라우팅, 코드 스플리팅 등 다양한 기능을 제공하는 React 프레임워크입니다. 필요할 경우에는 <code class=\"language-text\">next.config.js</code> 안에서 Webpack 설정 등을 오버라이딩할 수 있습니다.</p>\n<blockquote>\n<p>👉 <a href=\"https://medium.freecodecamp.org/demystifying-reacts-server-side-render-de335d408fe4\">서버 사이드 렌더링(Sever Side Rendering, SSR)</a> : 기존의 Single Page App 에서는 초기에 로드되는 자바스크립트 코드가 html 을 그리게 됩니다. SSR 은 서버에서 html 을 그려서 리턴합니다. 검색 엔진에서 html 크롤링이 가능하기 때문에 SEO 에 유리하고, 초기에 자바스크립트 파일을 불러서 렌더링하는 시간도 단축할 수 있습니다.</p>\n</blockquote>\n<p>이 포스팅에서는 Next.js 로 React 프로젝트를 구성하고, TypeScript 와 관련된 설정을 하는 방법에 대해서 다룹니다.</p>\n<hr>\n<h2>1. Setup</h2>\n<h3>1. Install packages</h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> react @types/react next @types/next\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> typescript @zeit/next-typescript</code></pre>\n      </div>\n<h3>2. Add <code class=\"language-text\">.babelrc</code></h3>\n<p>프로젝트 루트 경로에 <code class=\"language-text\">.babelrc</code>를 추가하고 아래의 설정을 추가합니다. TypeScript 를 사용하기 위해서 <code class=\"language-text\">@zeit/next-typescript/babel</code>가 필요합니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;presets&quot;: [&quot;next/babel&quot;, &quot;@zeit/next-typescript/babel&quot;]\n}</code></pre>\n      </div>\n<h3>3. Create <code class=\"language-text\">next.config.js</code></h3>\n<p><code class=\"language-text\">next.config.js</code>안에서는 <code class=\"language-text\">webpack</code> hook 을 사용하여 webpack 설정을 해주는 것도 가능합니다. <code class=\"language-text\">next-typescript</code> 플러그인을 사용하기 위해서 아래와 같이 export 합니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// next.config.js</span>\n<span class=\"token keyword\">const</span> withTypescript <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@zeit/next-typescript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">withTypescript</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">webpack</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3>4. Create <code class=\"language-text\">tsconfig.json</code></h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compileOnSave\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jsx\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allowJs\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"moduleResolution\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allowSyntheticDefaultImports\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<hr>\n<h2>2. Components</h2>\n<h3>1. Create <code class=\"language-text\">pages/</code></h3>\n<p>Next.js 는 기본적으로 file system routing 을 지원합니다. 먼저 아래와 같이 index 파일을 만들어줍니다.</p>\n<blockquote>\n<p><code class=\"language-text\">pages/</code> 경로에 <code class=\"language-text\">lol.tsx</code> 파일을 생성하면 <code class=\"language-text\">/lol</code> 라는 페이지가 생성되고 url 로 접근할 수 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> pages\n$ <span class=\"token function\">touch</span> pages/index.tsx</code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// pages/index.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Index<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FunctionComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Index<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3>2. Add scripts</h3>\n<p><code class=\"language-text\">package.json</code>에 아래와 같이 next 의 빌드/개발 환경 스크립트를 추가합니다. <code class=\"language-text\">yarn dev</code>를 실행하고 <code class=\"language-text\">http://localhost:3000/</code>에 접속하면 'hello world'를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"next\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"next start\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"next build\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<blockquote>\n<p>Next.js 가 빌드된 결과물이 담기는 <code class=\"language-text\">.next</code> 를 <code class=\"language-text\">.gitignore</code>에 추가합니다.</p>\n</blockquote>\n<h3>3. Using CSS, styled-components</h3>\n<p>CSS 를 사용하기 위해서는 <code class=\"language-text\">@zeit/next-css</code>를 설치하고 아래와 같이 <code class=\"language-text\">next.config.js</code> 에 추가합니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// next.config.js</span>\n<span class=\"token keyword\">const</span> withTypescript <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@zeit/next-typescript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> withCss <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@zeit/next-css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">withTypescript</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">withCss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">webpack</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><a href=\"https://www.styled-components.com/docs/tooling#babel-plugin\">styled-component</a> 와 같은 css-in-js 를 사용하기 위해서는 서버 사이드 렌더링을 지원하는 babel 플러그인을 설치해줍니다. 그리고 <code class=\"language-text\">.babelrc</code> 파일에도 설정을 추가합니다.</p>\n<blockquote>\n<p>이 플러그인이 없을 경우, 클라이언트 사이드에서 생성한 <code class=\"language-text\">className</code> 해시값과 서버 사이드에서 생성한 값이 일치하지 않아 오류가 발생합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> babel-plugin-styled-components -D</code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">// .babelrc\n&quot;plugins&quot;: [&quot;babel-plugin-styled-components&quot;]</code></pre>\n      </div>\n<hr>\n<h2>3. Routing</h2>\n<p>Next.js 에서 자동으로 만들어주는 file system 라우팅은 클라이언트 사이드에서만 지원됩니다. 프로젝트가 로딩된 후 내부의 링크를 통해서 라우팅이 되었을 때만 페이지에 접근할 수 있으며, 주소창에서 직접 url 을 입력하면 접근할 수 없습니다.</p>\n<p>이 문제는 Custom server API 에 라우트를 등록하고 서빙하도록 함으로써 해결할 수 있습니다. 아래의 내용은 <a href=\"https://nextjs.org/learn/basics/server-side-support-for-clean-urls/create-a-custom-server\">Learn Next.js - create a custom server</a>를 참고하였습니다.</p>\n<h3>1. Install <code class=\"language-text\">express</code></h3>\n<p>Server API 를 만들기 위해 express 를 설치합니다. 그리고 아래와 같이 <code class=\"language-text\">server.js</code> 파일을 만들어줍니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> express</code></pre>\n      </div>\n<h3>2. Create <code class=\"language-text\">server.js</code></h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// server.js</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dev <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dev <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handle <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp\n  <span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"> Ready on http://localhost:3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ex</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3>3. Edit scripts</h3>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"scripts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node server.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"NODE_ENV=production node server.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"next build\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>4. Add routes</h3>\n<p>만약 <code class=\"language-text\">/map</code> 경로에 <code class=\"language-text\">pages/map.tsx</code> 컴포넌트를 보여주고 싶다면 아래와 같이 코드를 추가합니다. <code class=\"language-text\">/map/:name</code>과 같은 query parameter 도 아래와 같이 추가할 수 있습니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/map\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> actualPage <span class=\"token operator\">=</span> <span class=\"token string\">\"/map\"</span><span class=\"token punctuation\">;</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> actualPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/map/:name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> actualPage <span class=\"token operator\">=</span> <span class=\"token string\">\"/map\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queryParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> actualPage<span class=\"token punctuation\">,</span> queryParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h3>5. Client side routing</h3>\n<p>클라이언트 사이드 라우팅은 아래처럼 <code class=\"language-text\">next/link</code>를 사용합니다. <code class=\"language-text\">Link</code> 컴포넌트의 children 으로 <code class=\"language-text\">&lt;a&gt;</code> 태그를 사용해야합니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/link\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>Link href<span class=\"token operator\">=</span><span class=\"token string\">\"/map\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">></span>Map<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">Router.push()</code>를 사용해서 경로를 이동하는 것도 가능합니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/map/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<hr>\n<h2>4. Data fetching</h2>\n<p>Next.js 에서는 <code class=\"language-text\">getInitialProps</code>를 통해 <code class=\"language-text\">asPath</code>, <code class=\"language-text\">query</code> 등의 변수에 접근할 수 있습니다. 이 static 함수는 최초 서버 사이드 렌더링 시 또는 클라이언트 라우팅으로 접근 시 한번씩만 호출됩니다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">API_URL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MapPage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">getInitialProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> NextContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/places/?map=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> places<span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>places <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Map places<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>places<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MapPage<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p><code class=\"language-text\">getInitialProps</code> 안에서는 서버 사이드기 때문에 <code class=\"language-text\">console.log()</code>를 찍으면 결과값은 브라우저가 아니라 터미널에 나타나게 됩니다.</p>\n</blockquote>\n<blockquote>\n<p>Next.js 에서 <code class=\"language-text\">API_URL</code>같은 환경변수를 사용하는 방법은 <a href=\"https://jaketrent.com/post/environment-variables-in-nextjs/\"><code class=\"language-text\">dotenv</code></a> 또는 Next.js 에서 지원하는 <a href=\"https://zeit.co/blog/next5-1#environment-configuration\"><code class=\"language-text\">getConfig()</code></a>를 이용하는 방법이 있습니다.</p>\n</blockquote>","frontmatter":{"title":"React + Next.js + TypeScript = ❤️","date":"2019-03-24","path":"/react-typescript-nextjs","tags":["nextjs","ssr","react","express","typescript"],"excerpt":"Building and deploying SSR React with NextJS"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}