{"componentChunkName":"component---src-templates-blog-post-js","path":"/recursion","webpackCompilationHash":"36462b6fae656ae36777","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://interactivepython.org/courselib/static/pythonds/index.html\">Problem Solving with Algorithms and Data Structures using Python</a> 책을 읽으며 스터디한 내용을 정리하여 연재합니다.</p>\n<hr>\n<h2>1. Recursion 이란?</h2>\n<ul>\n<li>Breaking down a problem into smaller and easier subproblems</li>\n<li>A <code class=\"language-text\">recursive function</code> is a function that calls itself</li>\n<li>It’s ELEGANT!</li>\n</ul>\n<p>Recursion이란 문제를 가장 작은 단위까지 쪼개서 해결하는 것을 의미한다. 함수를 반복해서 호출하며 가장 작은 단위까지 내려가기만 해도 큰 단위의 문제를 해결할 수 있다. 아래는 리스트의 모든 값을 더하는 recursive한 함수이다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Recursive sum</span>\n<span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">recursive_sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># base-case</span>\n        <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> recursive_sum<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span></code></pre>\n      </div>\n<p>여기서 <code class=\"language-text\">len(list) == 1</code> 인 경우를 정의하는 것이 가장 중요한데, 이를 base case 라고 부른다. Recursion에서는 base case를 잘 정의하는 것이 제일 중요하다. 반복해서 돌아가는 recursive function이 종료되는 조건이기 때문이다. 가장 작은 recursive function 을 정의하면 나머지는 그냥 함수를 recursive하게 불러오기만 하면 된다.</p>\n<hr>\n<h2>2. 3 laws of recursion</h2>\n<ol>\n<li>must have a <strong>base case</strong></li>\n<li><strong>state-changing</strong> &#x26; move toward the base case</li>\n<li>must <strong>call itself</strong>, recursively</li>\n</ol>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Recursive factorial</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> fact<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>여기서 base case는 n이 1보다 작을 때이다. 1보다 큰 경우에는 자기 자신을 계속 불러오며 base case를 향해 상태를 변경한다.</p>\n<ul>\n<li>10진법 수를 (2~16)진법 수로 변환해보자!</li>\n</ul>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># % 는 나머지, // 는 몫</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">toStr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    convertString <span class=\"token operator\">=</span> <span class=\"token string\">\"0123456789ABCDEF\"</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> base<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> convertString<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> toStr<span class=\"token punctuation\">(</span>n <span class=\"token operator\">//</span> base<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> convertString<span class=\"token punctuation\">[</span>n <span class=\"token operator\">%</span> base<span class=\"token punctuation\">]</span></code></pre>\n      </div>\n<ul>\n<li>Readability over Time complexity : Recursion는 for문을 돌릴 때보다 time complexity가 높다. 자기 자신을 계속 불러오기 때문에 메모리 사용량도 크다. (for문의 경우 값을 구하고 바로바로 반환하기 때문에 일정한 메모리를 사용한다.) 그러나 읽기 좋은 코드를 만들 수 있다.</li>\n</ul>\n<hr>\n<h2>3. Binary Search</h2>\n<p>오름차순으로 정렬되어 있는 리스트에서 특정 값을 찾는 방법. 큰 값(high)과 작은 값(low)이 있고 중간값(mid)이 그 사이에 있는지 보면서 해당 값의 위치를 찾는다.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> low <span class=\"token operator\">></span> high<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>    \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>     \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">elif</span> target <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>   \n            <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<ul>\n<li>함께 보기 👉 <a href=\"http://interactivepython.org/courselib/static/pythonds/SortSearch/TheQuickSort.html\">Quick sort</a>, <a href=\"https://en.wikipedia.org/wiki/Segment_tree\">Segment tree</a></li>\n</ul>\n<hr>\n<h2>4. Visualizing Recursion</h2>\n<ul>\n<li>\n<p>Fractal</p>\n<ul>\n<li>The fractal has the same basic shape no matter how much you magnify it</li>\n</ul>\n</li>\n<li>Python의 visualizing 툴인 <a href=\"https://docs.python.org/3.6/library/turtle.html\">turtle</a>을 사용하면 다양한 fractal을 시각화 할 수 있다.</li>\n<li>함께 보기 👉 <a href=\"http://interactivepython.org/courselib/static/pythonds/Recursion/TowerofHanoi.html\">하노이의 탑 문제</a> - n개 높이의 하노이 탑이 있다고 하자. 가장 위에 있는 첫번째 디스크 다른 곳으로 옮기면, 남은 (n-1)개 탑에 대한 하노이 탑이 된다. 그래서 하노이의 탑도 재귀를 이용해서 풀 수 있다.</li>\n<li>함께 보기 👉 <a href=\"https://en.wikipedia.org/wiki/Memoization\">Memoization</a> - 이미 구한 값은 메모리에 저장하고 다시 구하지 않도록 하여 보다 빠르게 연산하는 방법 <a href=\"http://interactivepython.org/courselib/static/pythonds/Recursion/DynamicProgramming.html\">(Mincoins)</a></li>\n</ul>","frontmatter":{"title":"Recursion","date":"2017-08-17","path":"/recursion","tags":["Algorithm","python"],"excerpt":"Python Algorithm Study - Week 5, 6"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}