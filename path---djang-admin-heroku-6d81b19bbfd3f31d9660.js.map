{"version":3,"sources":["webpack:///path---djang-admin-heroku-6d81b19bbfd3f31d9660.js","webpack:///./.cache/json/djang-admin-heroku.json"],"names":["webpackJsonp","379","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,82VAA8tNC,aAA27IC,MAAA,2BAAAC,KAAA,aAAAC,KAAA,sBAAAC,MAAA,mBAAAC,QAAA,yDAAiLC","file":"path---djang-admin-heroku-6d81b19bbfd3f31d9660.js","sourcesContent":["webpackJsonp([224068526013896],{\n\n/***/ 379:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>0. django 프로젝트 만들기</h2>\\n<p>먼저 가상환경을 활성화하고 admin 페이지를 서빙해줄 django 프로젝트를 만들어주세요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ python -m venv myvenv\\n$ source myvenv/bin/activate\\n\\n(myvenv) $ pip install django\\n(myvenv) $ django-admin startproject projectname\\n(myvenv) $ cd projectname\\n(myvenv) $ git init\\n(myvenv) $ django-admin startapp appname\\n(myvenv) $ python manage.py migrate\\n(myvenv) $ python manage.py createsuperuser</code></pre>\\n      </div>\\n<p>heroku는 git에 푸시된 내용을 기준으로 서버에 업데이트 되기 때문에 git init 을 꼭 해줍니다.</p>\\n<p>'.gitignore'도 추가해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">/*.gitignore*/\\nvenv\\n*.pyc\\nstaticfiles\\n.env</code></pre>\\n      </div>\\n<p>'requirements.txt' 도 당연히 만들어야겠죠. gunicorn 까지 설치해준 뒤 루트 디렉토리가 있는 위치에서 requirements.txt를 만들어줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ pip install gunicorn\\n$ pip freeze > requirements.txt</code></pre>\\n      </div>\\n<hr>\\n<h2>1. Procfile 만들기</h2>\\n<p>heroku는 Procfile 이라고 하는 파일이 꼭 있어야합니다. Procfile은 배포하고자 하는 앱의 루트 디렉토리에 있어야하며(django 프로젝트의 경우 manage.py가 있는 경로), 앱을 시작할 때 어떤 커맨드가 실행되어야할지 명시해주는 역할을 합니다. <a href=\\\"https://devcenter.heroku.com/articles/getting-started-with-python#define-a-procfile\\\">출처: Define a Procfile</a></p>\\n<ul>\\n<li>Procfile</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">web: gunicorn projectname.wsgi --log-file -</code></pre>\\n      </div>\\n<ul>\\n<li>Procfile.windows</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">web: python manage.py runserver 0.0.0.0:5000</code></pre>\\n      </div>\\n<hr>\\n<h2>2. Static 처리하기</h2>\\n<p>django는 정적 파일을 서빙해주지 않습니다.(<a href=\\\"https://devcenter.heroku.com/articles/django-assets\\\">출처</a>) 이 작업을 대신 해주는 whitenoise 라는 것이 있습니다. <a href=\\\"http://whitenoise.evans.io/en/stable/\\\">WhiteNoise</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ pip install whitenoise</code></pre>\\n      </div>\\n<p>그리고 django 앱의 settings.py를 아래와 같이 설정해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># settings.py</span>\\n\\nSTATIC_ROOT <span class=\\\"token operator\\\">=</span> os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>join<span class=\\\"token punctuation\\\">(</span>BASE_DIR<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'staticfiles'</span><span class=\\\"token punctuation\\\">)</span>\\nSTATIC_URL <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'/static/'</span>\\n\\nSTATICFILES_STORAGE <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'whitenoise.django.GzipManifestStaticFilesStorage'</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>공식문서에는 STATICFILES_DIRS를 지정하지만 이부분을 주석처리해야 정상적으로 작동합니다. <a href=\\\"http://stackoverflow.com/questions/41904685/oserror-errno-2-no-such-file-or-directory-tmp-makecalls-static\\\">StackOverflow</a></li>\\n<li>Whitenoise-Django 공식문서 : <a href=\\\"http://whitenoise.evans.io/en/stable/django.html\\\">http://whitenoise.evans.io/en/stable/django.html</a></li>\\n</ol>\\n<p>wsgi.py 파일에도 whitenoise 관련된 설정을 아래와 같이 해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># wsgi.py</span>\\n\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>core<span class=\\\"token punctuation\\\">.</span>wsgi <span class=\\\"token keyword\\\">import</span> get_wsgi_application\\n<span class=\\\"token keyword\\\">from</span> whitenoise<span class=\\\"token punctuation\\\">.</span>django <span class=\\\"token keyword\\\">import</span> DjangoWhiteNoise\\n\\napplication <span class=\\\"token operator\\\">=</span> get_wsgi_application<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\napplication <span class=\\\"token operator\\\">=</span> DjangoWhiteNoise<span class=\\\"token punctuation\\\">(</span>application<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>설정이 끝나면 manage.py가 있는 경로에 static 디렉토리를 생성해줍니다. 주의할 점은 git에 빈 디렉토리는 관리대상이 아니기 때문에 아무 파일이나 넣고 커밋을 해주어야 합니다. heroku 서버에서는 git을 기준으로 서버를 업데이트하기 때문입니다.</p>\\n<p>이제 모든 준비는 끝났습니다.</p>\\n<hr>\\n<h2>3. 배포하기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">heroku login\\nheroku create\\nheroku buildpacks:set heroku/python</code></pre>\\n      </div>\\n<p>프로젝트가 파이썬 기반임을 buildpacks 커맨드를 통해 알려줘야합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ git push heroku master\\n$ heroku open</code></pre>\\n      </div>\\n<p>이렇게 하면 정상적으로 django의 It worked! 페이지를 볼 수 있습니다.</p>\\n<hr>\\n<h2>4. DB 연결하기</h2>\\n<p>django는 db가 mysql일 경우, mysqlclient를 추천하고 있습니다. 아래와 같이 설치해주세요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ pip install mysqlclient</code></pre>\\n      </div>\\n<p>그리고 settings.py에 아래와 같이 DB를 설정해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># settings.py</span>\\n\\nDATABASES <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'default'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'ENGINE'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'django.db.backends.mysql'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'NAME'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'테이블이름'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'HOST'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'서버 호스트 주소'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'PORT'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3306'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'USER'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'root 또는 설정한 사용자 이름'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'PASSWORD'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'db 비밀번호'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>이제 django에서 아주 유용한 inspectdb 기능을 쓸 차례인데요. 이 명령어 하나만으로 models.py의 내용이 자동으로 채워집니다. 그 다음 migration해주면 DB세팅은 끝나게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ python manage.py inspectdb > appname/models.py\\n\\n$ python manage.py makemigrations\\n$ python manage.py migrate</code></pre>\\n      </div>\\n<hr>\\n<h2>5. ALLOWED_HOSTS 추가하기</h2>\\n<p>heroku open 커맨드로 사이트를 열었을 때, url이 자동생성되어 제공됩니다. 보통 '형용사+명사.herokuapp.com' 의 형태로 이루어져 있습니다. 이 url을 django settings.py에서 아래와 같이 접근 가능한 host에 추가해주세요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># settings.py 에 추가</span>\\nALLOWED_HOSTS <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>u<span class=\\\"token string\\\">'mysitename.herokuapp.com'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'localhost'</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>6. 커밋하기</h2>\\n<p>이제 git 에 커밋하여 결과물을 확인할 단계만 남았습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ git add .\\n$ git commit -m \\\"...\\\"\\n$ git push heroku master</code></pre>\\n      </div>\\n<ul>\\n<li>heroku 샘플 django프로젝트 레포 참고 <a href=\\\"https://github.com/heroku/python-getting-started/blob/master/gettingstarted/settings.py\\\">https://github.com/heroku/python-getting-started/blob/master/gettingstarted/settings.py</a></li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ heroku local\\n$ heroku open</code></pre>\\n      </div>\\n<p><code>heroku local</code>은 로컬에서 확인하는 것이고 <code>heroku open</code>은 url로 접근할 수 있습니다. 로컬에서 확인할 경우, 0.0.0.0:5000은 접속되지 않지만 localhost:5000으로 접근하면 화면이 보여집니다.</p>\\n<hr>\\n<h2>7. admin.py 설정하기</h2>\\n<p>localhost:5000/admin 으로 들어가서 superuser로 로그인하면 admin페이지가 보이지만 DB테이블이 보이지 않습니다. admin.py에서 모델 클래스를 등록을 해줘야 하기 떄문입니다. django 앱의 admin.py 파일에 가서 아래와 같이 테이블의 컬럼을 추가해주세요. list_display 에 있는 내용만 admin 페이지에서 보이게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># admin.py</span>\\n\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>contrib <span class=\\\"token keyword\\\">import</span> admin\\n<span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span>\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>contrib<span class=\\\"token punctuation\\\">.</span>auth<span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> User\\n\\n@admin<span class=\\\"token punctuation\\\">.</span>register<span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserAdmin</span><span class=\\\"token punctuation\\\">(</span>admin<span class=\\\"token punctuation\\\">.</span>ModelAdmin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    list_display <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'user_id'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'datetime'</span><span class=\\\"token punctuation\\\">]</span>\\n    list_display_link <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><a href=\\\"https://devcenter.heroku.com/articles/django-app-configuration\\\">Configuring Django Apps for Heroku</a></li>\\n<li><a href=\\\"https://devcenter.heroku.com/articles/python-concurrency-and-database-connections\\\">Concurrency and Database Connections in Django</a></li>\\n<li><a href=\\\"https://devcenter.heroku.com/articles/heroku-postgresql#provisioning-the-add-on\\\">Heroku Postgres</a></li>\\n<li><a href=\\\"https://data.heroku.com/\\\">Heroku Data</a></li>\\n</ul>\\n<p><strong>Let's code like a girl!</strong></p>\",\"frontmatter\":{\"title\":\"기존 DB에 Django admin 연결하기\",\"date\":\"2017-03-28\",\"path\":\"/djang-admin-heroku\",\"tags\":[\"Django\",\"Heroku\"],\"excerpt\":\"MySQL을 연결하여 Django admin에서 DB를 관리하고 Heroku에 배포해봅시다.\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---djang-admin-heroku-6d81b19bbfd3f31d9660.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>0. django 프로젝트 만들기</h2>\\n<p>먼저 가상환경을 활성화하고 admin 페이지를 서빙해줄 django 프로젝트를 만들어주세요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ python -m venv myvenv\\n$ source myvenv/bin/activate\\n\\n(myvenv) $ pip install django\\n(myvenv) $ django-admin startproject projectname\\n(myvenv) $ cd projectname\\n(myvenv) $ git init\\n(myvenv) $ django-admin startapp appname\\n(myvenv) $ python manage.py migrate\\n(myvenv) $ python manage.py createsuperuser</code></pre>\\n      </div>\\n<p>heroku는 git에 푸시된 내용을 기준으로 서버에 업데이트 되기 때문에 git init 을 꼭 해줍니다.</p>\\n<p>'.gitignore'도 추가해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">/*.gitignore*/\\nvenv\\n*.pyc\\nstaticfiles\\n.env</code></pre>\\n      </div>\\n<p>'requirements.txt' 도 당연히 만들어야겠죠. gunicorn 까지 설치해준 뒤 루트 디렉토리가 있는 위치에서 requirements.txt를 만들어줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ pip install gunicorn\\n$ pip freeze > requirements.txt</code></pre>\\n      </div>\\n<hr>\\n<h2>1. Procfile 만들기</h2>\\n<p>heroku는 Procfile 이라고 하는 파일이 꼭 있어야합니다. Procfile은 배포하고자 하는 앱의 루트 디렉토리에 있어야하며(django 프로젝트의 경우 manage.py가 있는 경로), 앱을 시작할 때 어떤 커맨드가 실행되어야할지 명시해주는 역할을 합니다. <a href=\\\"https://devcenter.heroku.com/articles/getting-started-with-python#define-a-procfile\\\">출처: Define a Procfile</a></p>\\n<ul>\\n<li>Procfile</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">web: gunicorn projectname.wsgi --log-file -</code></pre>\\n      </div>\\n<ul>\\n<li>Procfile.windows</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">web: python manage.py runserver 0.0.0.0:5000</code></pre>\\n      </div>\\n<hr>\\n<h2>2. Static 처리하기</h2>\\n<p>django는 정적 파일을 서빙해주지 않습니다.(<a href=\\\"https://devcenter.heroku.com/articles/django-assets\\\">출처</a>) 이 작업을 대신 해주는 whitenoise 라는 것이 있습니다. <a href=\\\"http://whitenoise.evans.io/en/stable/\\\">WhiteNoise</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ pip install whitenoise</code></pre>\\n      </div>\\n<p>그리고 django 앱의 settings.py를 아래와 같이 설정해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># settings.py</span>\\n\\nSTATIC_ROOT <span class=\\\"token operator\\\">=</span> os<span class=\\\"token punctuation\\\">.</span>path<span class=\\\"token punctuation\\\">.</span>join<span class=\\\"token punctuation\\\">(</span>BASE_DIR<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'staticfiles'</span><span class=\\\"token punctuation\\\">)</span>\\nSTATIC_URL <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'/static/'</span>\\n\\nSTATICFILES_STORAGE <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'whitenoise.django.GzipManifestStaticFilesStorage'</span>\\n</code></pre>\\n      </div>\\n<ol>\\n<li>공식문서에는 STATICFILES_DIRS를 지정하지만 이부분을 주석처리해야 정상적으로 작동합니다. <a href=\\\"http://stackoverflow.com/questions/41904685/oserror-errno-2-no-such-file-or-directory-tmp-makecalls-static\\\">StackOverflow</a></li>\\n<li>Whitenoise-Django 공식문서 : <a href=\\\"http://whitenoise.evans.io/en/stable/django.html\\\">http://whitenoise.evans.io/en/stable/django.html</a></li>\\n</ol>\\n<p>wsgi.py 파일에도 whitenoise 관련된 설정을 아래와 같이 해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># wsgi.py</span>\\n\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>core<span class=\\\"token punctuation\\\">.</span>wsgi <span class=\\\"token keyword\\\">import</span> get_wsgi_application\\n<span class=\\\"token keyword\\\">from</span> whitenoise<span class=\\\"token punctuation\\\">.</span>django <span class=\\\"token keyword\\\">import</span> DjangoWhiteNoise\\n\\napplication <span class=\\\"token operator\\\">=</span> get_wsgi_application<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\napplication <span class=\\\"token operator\\\">=</span> DjangoWhiteNoise<span class=\\\"token punctuation\\\">(</span>application<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>설정이 끝나면 manage.py가 있는 경로에 static 디렉토리를 생성해줍니다. 주의할 점은 git에 빈 디렉토리는 관리대상이 아니기 때문에 아무 파일이나 넣고 커밋을 해주어야 합니다. heroku 서버에서는 git을 기준으로 서버를 업데이트하기 때문입니다.</p>\\n<p>이제 모든 준비는 끝났습니다.</p>\\n<hr>\\n<h2>3. 배포하기</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">heroku login\\nheroku create\\nheroku buildpacks:set heroku/python</code></pre>\\n      </div>\\n<p>프로젝트가 파이썬 기반임을 buildpacks 커맨드를 통해 알려줘야합니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ git push heroku master\\n$ heroku open</code></pre>\\n      </div>\\n<p>이렇게 하면 정상적으로 django의 It worked! 페이지를 볼 수 있습니다.</p>\\n<hr>\\n<h2>4. DB 연결하기</h2>\\n<p>django는 db가 mysql일 경우, mysqlclient를 추천하고 있습니다. 아래와 같이 설치해주세요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ pip install mysqlclient</code></pre>\\n      </div>\\n<p>그리고 settings.py에 아래와 같이 DB를 설정해줍니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># settings.py</span>\\n\\nDATABASES <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'default'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token string\\\">'ENGINE'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'django.db.backends.mysql'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'NAME'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'테이블이름'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'HOST'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'서버 호스트 주소'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'PORT'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3306'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'USER'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'root 또는 설정한 사용자 이름'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token string\\\">'PASSWORD'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'db 비밀번호'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>이제 django에서 아주 유용한 inspectdb 기능을 쓸 차례인데요. 이 명령어 하나만으로 models.py의 내용이 자동으로 채워집니다. 그 다음 migration해주면 DB세팅은 끝나게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ python manage.py inspectdb > appname/models.py\\n\\n$ python manage.py makemigrations\\n$ python manage.py migrate</code></pre>\\n      </div>\\n<hr>\\n<h2>5. ALLOWED_HOSTS 추가하기</h2>\\n<p>heroku open 커맨드로 사이트를 열었을 때, url이 자동생성되어 제공됩니다. 보통 '형용사+명사.herokuapp.com' 의 형태로 이루어져 있습니다. 이 url을 django settings.py에서 아래와 같이 접근 가능한 host에 추가해주세요.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># settings.py 에 추가</span>\\nALLOWED_HOSTS <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>u<span class=\\\"token string\\\">'mysitename.herokuapp.com'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'localhost'</span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h2>6. 커밋하기</h2>\\n<p>이제 git 에 커밋하여 결과물을 확인할 단계만 남았습니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ git add .\\n$ git commit -m \\\"...\\\"\\n$ git push heroku master</code></pre>\\n      </div>\\n<ul>\\n<li>heroku 샘플 django프로젝트 레포 참고 <a href=\\\"https://github.com/heroku/python-getting-started/blob/master/gettingstarted/settings.py\\\">https://github.com/heroku/python-getting-started/blob/master/gettingstarted/settings.py</a></li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">$ heroku local\\n$ heroku open</code></pre>\\n      </div>\\n<p><code>heroku local</code>은 로컬에서 확인하는 것이고 <code>heroku open</code>은 url로 접근할 수 있습니다. 로컬에서 확인할 경우, 0.0.0.0:5000은 접속되지 않지만 localhost:5000으로 접근하면 화면이 보여집니다.</p>\\n<hr>\\n<h2>7. admin.py 설정하기</h2>\\n<p>localhost:5000/admin 으로 들어가서 superuser로 로그인하면 admin페이지가 보이지만 DB테이블이 보이지 않습니다. admin.py에서 모델 클래스를 등록을 해줘야 하기 떄문입니다. django 앱의 admin.py 파일에 가서 아래와 같이 테이블의 컬럼을 추가해주세요. list_display 에 있는 내용만 admin 페이지에서 보이게 됩니다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token comment\\\"># admin.py</span>\\n\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>contrib <span class=\\\"token keyword\\\">import</span> admin\\n<span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span>\\n<span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>contrib<span class=\\\"token punctuation\\\">.</span>auth<span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> User\\n\\n@admin<span class=\\\"token punctuation\\\">.</span>register<span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">UserAdmin</span><span class=\\\"token punctuation\\\">(</span>admin<span class=\\\"token punctuation\\\">.</span>ModelAdmin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    list_display <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'user_id'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'datetime'</span><span class=\\\"token punctuation\\\">]</span>\\n    list_display_link <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li><a href=\\\"https://devcenter.heroku.com/articles/django-app-configuration\\\">Configuring Django Apps for Heroku</a></li>\\n<li><a href=\\\"https://devcenter.heroku.com/articles/python-concurrency-and-database-connections\\\">Concurrency and Database Connections in Django</a></li>\\n<li><a href=\\\"https://devcenter.heroku.com/articles/heroku-postgresql#provisioning-the-add-on\\\">Heroku Postgres</a></li>\\n<li><a href=\\\"https://data.heroku.com/\\\">Heroku Data</a></li>\\n</ul>\\n<p><strong>Let's code like a girl!</strong></p>\",\"frontmatter\":{\"title\":\"기존 DB에 Django admin 연결하기\",\"date\":\"2017-03-28\",\"path\":\"/djang-admin-heroku\",\"tags\":[\"Django\",\"Heroku\"],\"excerpt\":\"MySQL을 연결하여 Django admin에서 DB를 관리하고 Heroku에 배포해봅시다.\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/djang-admin-heroku.json\n// module id = 379\n// module chunks = 224068526013896"],"sourceRoot":""}