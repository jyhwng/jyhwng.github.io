webpackJsonp([0xcc00f210798f],{384:function(n,a){n.exports={data:{markdownRemark:{html:'<blockquote>\n<p>개인적인 공부 노트로, 오류가 있을 수 있습니다.</p>\n</blockquote>\n<h2>1. What is web cache?</h2>\n<blockquote>\n<p>캐시의 어원은 프랑스어로 "hiding place for stores"라는 의미이다. (<a href="https://en.wiktionary.org/wiki/cache">출처</a>)</p>\n</blockquote>\n<p>캐시는 동일한 request(동일한 이름의 리소스)에 대하여 브라우저가(또는 네트워크 단에서) 갖고있는 response 의 복사본이다. 브라우저는 이전의 응답을 기억하고 있다가 동일한 request 가 올 때 서버에 다시 요청하지 않고 복사본을 반환한다. 서버를 거치지 않기 때문에 빠르고, 부하도 적다. 소스가 바뀔 때까지 캐시된 복사본을 반환하도록 할 수 있기 때문에 적절히 활용하면 사용자가 응답을 받는 속도를 현저히 줄일 수 있다.</p>\n<!-- 캐시된 화면 네트워크탭 -->\n<hr>\n<h2>2. Caching with <code>webpack</code></h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    filename<span class="token punctuation">:</span> <span class="token string">"static/js/main.[hash:8].js"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>웹팩에서는 위처럼 빌드된 js 파일에 hash 를 붙일 수 있다.</li>\n<li>새로 빌드가 될 때마다 해시값이 바뀌기 때문에 소스가 바뀌지 않으면 브라우저는 이를 같은 파일로 인식하고 캐싱한다.</li>\n<li>소스가 바뀌면 js 파일의 이름도 바뀌기 때문에 캐싱하지 않고 업데이트된 파일을 반환하게 된다.</li>\n<li>이미지 리소스에 대해서도 <code>file-loader</code>에서 아래와 같이 해시값을 붙일 수 있다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      test<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token regex">/\\.jpeg?g$/</span><span class="token punctuation">,</span> <span class="token operator">/</span>\\<span class="token punctuation">.</span>png$<span class="token operator">/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>\n          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">"[name].[hash:8].[ext]"</span><span class="token punctuation">,</span>\n            outputPath<span class="token punctuation">:</span> <span class="token string">"img/"</span><span class="token punctuation">,</span>\n            publicPath<span class="token punctuation">:</span> <span class="token string">"img/"</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<hr>\n<h2>3. Cache-control</h2>\n<p>html, css, js 등 리소스에 대하여 <code>cache-control</code> HTTP header 를 지정하면 더욱 공격적으로 캐싱을 할 수 있다. <code>cache-control</code>에 들어가는 값은 <code>,</code>로 구분된 문자열이다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">$ tree <span class="token keyword">.</span>\ndist\n├── favicon.ico\n├── index.html\n└── static\n    ├── css\n    │ └── main.<span class="token punctuation">[</span>hash:8<span class="token punctuation">]</span>.css\n    ├── js\n    │ └── main.<span class="token punctuation">[</span>hash:8<span class="token punctuation">]</span>.js\n    └── media\n        └── image.png\n</code></pre>\n      </div>\n<p>예를 들어 위와 같은 디렉토리 구조로 Single Page Application 을 개발할 경우, 각각의 리소스에 대하여 다음과 같이 cache-control 을 설정할 수 있다.</p>\n<ol>\n<li>\n<p><code>index.html</code> - <code>"no-cache"</code></p>\n<ul>\n<li><code>no-cache</code> : 매 요청마다 콘텐츠가 바뀌었는지 서버에서 검증하는 round-trip 을 한번 한다. 리소스가 바뀌지 않았고 캐시가 있을 경우, 리소스를 요청하지 않고 캐시에서 가져온다.</li>\n<li>대부분의 SPA 는 index.html 안에서 해시 값이 붙은 js 파일을 로드하기 때문에 html 파일은 캐싱하지 않는다. js, css 의 경로(또는 파일명)가 바뀌었는지 여부를 판단해야하기 때문이다.</li>\n</ul>\n</li>\n<li>\n<p><code>main.[hash:8].js</code> - <code>"private, max-age=31536000"</code></p>\n<ul>\n<li><code>private</code> : js 파일에는 중요한 사용자 정보가 있을 수 있기 때문에 공용 cache 를 사용하지 않고 private cache (클라이언트의 브라우저)를 사용한다.</li>\n<li><code>max-age</code> : 초(second) 값을 받으며 명시된 시간동안 캐시를 사용하라는 의미이다. js 파일의 소스가 변경되어 새로 빌드되었을 경우, url 의 hash 값이 바뀌기 때문에 캐싱이 되지 않는다. <code>max-age=31536000</code>는 바뀌지 않는 리소스에 대하여 1 년간 캐싱함을 의미한다.</li>\n</ul>\n</li>\n<li>\n<p><code>main.css</code> - <code>"max-age=31536000"</code></p>\n<ul>\n<li><code>max-age=31536000</code> : js 파일과 마찬가지로 hash 가 붙기 때문에 바뀌지 않은 파일에 대하여 1 년간 캐싱한다.</li>\n</ul>\n</li>\n<li>\n<p>이미지 - <code>"max-age=86400"</code></p>\n<ul>\n<li><code>max-age</code> : url 이 바뀌지 않을 경우 1 일, hash 를 붙일 경우(웹팩에서 <code>require()</code>를 사용해 빌드하는 경우)에는 1 년으로 할 수 있다.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>4. How to set <code>cache-control</code></h2>\n<p>s3 를 이용하여 정적 파일을 호스팅할 경우, <a href="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-object-metadata.html">Metadata 설정</a>을 통해서 <code>cache-control</code> 을 지정할 수 있다. <a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html">AWS SDK for JavaScript</a> 를 사용하여 정적 파일을 s3 에 업로드/배포할 경우, 아래와 같이 <code>cache-control</code>을 설정할 수도 있다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">s3<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    Bucket<span class="token punctuation">:</span> bucket<span class="token punctuation">,</span> <span class="token comment">// S3 bucket name</span>\n    Key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> <span class="token comment">// file name</span>\n    Body<span class="token punctuation">:</span> file<span class="token punctuation">,</span>\n    ACL<span class="token punctuation">:</span> <span class="token string">"public-read"</span><span class="token punctuation">,</span>\n    ContentType<span class="token punctuation">:</span> <span class="token string">"application/javascript"</span><span class="token punctuation">,</span>\n    CacheControl<span class="token punctuation">:</span> <span class="token string">"private, max-age=86400"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Cloudfront 를 사용할 경우, <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html">cache invalidation</a> 을 통해 소스가 바뀌었지만 이름은 바뀌지 않은 리소스에 대하여 임의로 cache 를 지워줄 수도 있다.</p>\n<hr>\n<p>더 알아보기</p>\n<p><code>etag</code> - <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/ETag">https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/ETag</a></p>\n<p>Sources:</p>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching">https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching</a></li>\n<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching</a></li>\n</ul>',frontmatter:{title:"Optimizing Performance with Cache Control",date:"2019-02-17",path:"/performance-optimization-with-cache-control",tags:["cache","performance","webpack"],excerpt:""}}},pathContext:{}}}});
//# sourceMappingURL=path---performance-optimization-with-cache-control-d6527be5d9da88ea8c45.js.map